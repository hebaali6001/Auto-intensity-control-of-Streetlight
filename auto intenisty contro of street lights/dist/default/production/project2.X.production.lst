

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu May 26 21:41:03 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	smallconst
    47  001000                     __psmallconst:
    48                           	opt stack 0
    49  001000  00                 	db	0
    50  001001                     _dpowers:
    51                           	opt stack 0
    52  001001  0001               	dw	1
    53  001003  000A               	dw	10
    54  001005  0064               	dw	100
    55  001007  03E8               	dw	1000
    56  001009  2710               	dw	10000
    57  00100B                     __end_of_dpowers:
    58                           	opt stack 0
    59  0000                     _ADRES	set	4035
    60  0000                     _ADCON0bits	set	4034
    61  0000                     _ADCON1bits	set	4033
    62  0000                     _CCP1CONbits	set	4029
    63  0000                     _CCPR1L	set	4030
    64  0000                     _OSCCON	set	4051
    65  0000                     _PORTD	set	3971
    66  0000                     _PORTDbits	set	3971
    67  0000                     _PR2	set	4043
    68  0000                     _SSPADD	set	4040
    69  0000                     _SSPBUF	set	4041
    70  0000                     _SSPCON1	set	4038
    71  0000                     _SSPCON2	set	4037
    72  0000                     _SSPSTAT	set	4039
    73  0000                     _T2CONbits	set	4042
    74  0000                     _TMR2	set	4044
    75  0000                     _TRISD	set	3989
    76  0000                     _ACKDT	set	32301
    77  0000                     _ACKEN	set	32300
    78  0000                     _ACKSTAT	set	32302
    79  0000                     _ADFM	set	32263
    80  0000                     _ADON	set	32272
    81  0000                     _BF	set	32312
    82  0000                     _CKP	set	32308
    83  0000                     _GIE	set	32663
    84  0000                     _GO_DONE	set	32273
    85  0000                     _PEIE	set	32662
    86  0000                     _PEN	set	32298
    87  0000                     _RCEN	set	32299
    88  0000                     _RSEN	set	32297
    89  0000                     _R_nW	set	32314
    90  0000                     _SEN	set	32296
    91  0000                     _SSPIE	set	31979
    92  0000                     _SSPIF	set	31987
    93  0000                     _TMR2ON	set	32338
    94  0000                     _TRISC2	set	31906
    95  0000                     _TRISC3	set	31907
    96  0000                     _TRISC4	set	31908
    97  00100B                     STR_1:
    98  00100B  25                 	db	37
    99  00100C  32                 	db	50	;'2'
   100  00100D  64                 	db	100	;'d'
   101  00100E  20                 	db	32
   102  00100F  3A                 	db	58	;':'
   103  001010  20                 	db	32
   104  001011  25                 	db	37
   105  001012  32                 	db	50	;'2'
   106  001013  64                 	db	100	;'d'
   107  001014  00                 	db	0
   108  001015                     STR_2:
   109  001015  4D                 	db	77	;'M'
   110  001016  6F                 	db	111	;'o'
   111  001017  72                 	db	114	;'r'
   112  001018  6E                 	db	110	;'n'
   113  001019  69                 	db	105	;'i'
   114  00101A  6E                 	db	110	;'n'
   115  00101B  67                 	db	103	;'g'
   116  00101C  00                 	db	0
   117  00101D                     STR_4:
   118  00101D  4E                 	db	78	;'N'
   119  00101E  69                 	db	105	;'i'
   120  00101F  67                 	db	103	;'g'
   121  001020  68                 	db	104	;'h'
   122  001021  74                 	db	116	;'t'
   123  001022  00                 	db	0
   124  001023                     STR_8:
   125  001023  4D                 	db	77	;'M'
   126  001024  31                 	db	49	;'1'
   127  001025  00                 	db	0
   128  001026                     STR_10:
   129  001026  4D                 	db	77	;'M'
   130  001027  32                 	db	50	;'2'
   131  001028  00                 	db	0
   132  001029                     STR_12:
   133  001029  4D                 	db	77	;'M'
   134  00102A  33                 	db	51	;'3'
   135  00102B  00                 	db	0
   136  0000                     
   137                           ; #config settings
   138  00102C  00                 	db	0	; dummy byte at the end
   139  0000                     
   140                           	psect	cinit
   141  001D42                     __pcinit:
   142                           	opt stack 0
   143  001D42                     start_initialization:
   144                           	opt stack 0
   145  001D42                     __initialization:
   146                           	opt stack 0
   147                           
   148                           ; Clear objects allocated to COMRAM (27 bytes)
   149  001D42  EE00  F040         	lfsr	0,__pbssCOMRAM
   150  001D46  0E1B               	movlw	27
   151  001D48                     clear_0:
   152  001D48  6AEE               	clrf	postinc0,c
   153  001D4A  06E8               	decf	wreg,f,c
   154  001D4C  E1FD               	bnz	clear_0
   155  001D4E                     end_of_initialization:
   156                           	opt stack 0
   157  001D4E                     __end_of__initialization:
   158                           	opt stack 0
   159  001D4E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   160  001D50  6EF8               	movwf	tblptru,c
   161  001D52  0100               	movlb	0
   162  001D54  EF17  F008         	goto	_main	;jump to C main() function
   163                           tblptru	equ	0xFF8
   164                           postinc0	equ	0xFEE
   165                           wreg	equ	0xFE8
   166                           
   167                           	psect	bssCOMRAM
   168  000040                     __pbssCOMRAM:
   169                           	opt stack 0
   170  000040                     _result:
   171                           	opt stack 0
   172  000040                     	ds	2
   173  000042                     _x:
   174                           	opt stack 0
   175  000042                     	ds	2
   176  000044                     _out:
   177                           	opt stack 0
   178  000044                     	ds	16
   179  000054                     _date:
   180                           	opt stack 0
   181  000054                     	ds	1
   182  000055                     _day:
   183                           	opt stack 0
   184  000055                     	ds	1
   185  000056                     _hour:
   186                           	opt stack 0
   187  000056                     	ds	1
   188  000057                     _minute:
   189                           	opt stack 0
   190  000057                     	ds	1
   191  000058                     _month:
   192                           	opt stack 0
   193  000058                     	ds	1
   194  000059                     _second:
   195                           	opt stack 0
   196  000059                     	ds	1
   197  00005A                     _year:
   198                           	opt stack 0
   199  00005A                     	ds	1
   200                           tblptru	equ	0xFF8
   201                           postinc0	equ	0xFEE
   202                           wreg	equ	0xFE8
   203                           
   204                           	psect	cstackCOMRAM
   205  000001                     __pcstackCOMRAM:
   206                           	opt stack 0
   207  000001                     ??_ISRead:
   208  000001                     
   209                           ; 1 bytes @ 0x0
   210  000001                     	ds	14
   211  00000F                     ISRead@Dummy:
   212                           	opt stack 0
   213                           
   214                           ; 1 bytes @ 0xE
   215  00000F                     	ds	1
   216  000010                     ??_ISWrite:
   217                           
   218                           ; 0 bytes @ 0xF
   219  000010                     	ds	14
   220  00001E                     ISWrite@deummy:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x1D
   224  00001E                     	ds	1
   225  00001F                     ??_isdigit:
   226  00001F                     ??_ADC_init:
   227  00001F                     ??_I2C_Wait:
   228  00001F                     ??_bcd_to_decimel:
   229  00001F                     ?_ADC_start:
   230                           	opt stack 0
   231  00001F                     ?___wmul:
   232                           	opt stack 0
   233  00001F                     ?___awdiv:
   234                           	opt stack 0
   235  00001F                     ?___awmod:
   236                           	opt stack 0
   237  00001F                     ?___lwdiv:
   238                           	opt stack 0
   239  00001F                     LCDWriteNibble@rs:
   240                           	opt stack 0
   241  00001F                     pwm_set_duty@duty:
   242                           	opt stack 0
   243  00001F                     ___wmul@multiplier:
   244                           	opt stack 0
   245  00001F                     ___awdiv@dividend:
   246                           	opt stack 0
   247  00001F                     ___awmod@dividend:
   248                           	opt stack 0
   249  00001F                     ___lwdiv@dividend:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x1E
   253  00001F                     	ds	1
   254  000020                     LCDWriteNibble@ch:
   255                           	opt stack 0
   256  000020                     ADC_init@ch_no:
   257                           	opt stack 0
   258  000020                     I2C_Write@Data:
   259                           	opt stack 0
   260  000020                     bcd_to_decimel@num:
   261                           	opt stack 0
   262  000020                     _isdigit$784:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0x1F
   266  000020                     	ds	1
   267  000021                     ??_LCDPutCmd:
   268  000021                     ??_LCDPutChar:
   269  000021                     ??_ADC_start:
   270  000021                     ??_pwm_set_duty:
   271  000021                     isdigit@c:
   272                           	opt stack 0
   273  000021                     RTC_READ_TIME@second:
   274                           	opt stack 0
   275  000021                     ___wmul@multiplicand:
   276                           	opt stack 0
   277  000021                     ___awdiv@divisor:
   278                           	opt stack 0
   279  000021                     ___awmod@divisor:
   280                           	opt stack 0
   281  000021                     ___lwdiv@divisor:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x20
   285  000021                     	ds	1
   286  000022                     LCDPutChar@ch:
   287                           	opt stack 0
   288  000022                     LCDPutCmd@ch:
   289                           	opt stack 0
   290  000022                     ADC_start@ANx:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x21
   294  000022                     	ds	1
   295  000023                     ??_LCD_Initialize:
   296  000023                     LCDGoto@ln:
   297                           	opt stack 0
   298  000023                     ___awdiv@counter:
   299                           	opt stack 0
   300  000023                     ___awmod@counter:
   301                           	opt stack 0
   302  000023                     LCDPutStr@str:
   303                           	opt stack 0
   304  000023                     RTC_READ_TIME@minute:
   305                           	opt stack 0
   306  000023                     ___wmul@product:
   307                           	opt stack 0
   308  000023                     ___lwdiv@quotient:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x22
   312  000023                     	ds	1
   313  000024                     ??_LCDGoto:
   314  000024                     ___awdiv@sign:
   315                           	opt stack 0
   316  000024                     ___awmod@sign:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x23
   320  000024                     	ds	1
   321  000025                     ??_LCDPutStr:
   322  000025                     ___lwdiv@counter:
   323                           	opt stack 0
   324  000025                     RTC_READ_TIME@hour:
   325                           	opt stack 0
   326  000025                     ___awdiv@quotient:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x24
   330  000025                     	ds	1
   331  000026                     ?___lwmod:
   332                           	opt stack 0
   333  000026                     _LCDGoto$116:
   334                           	opt stack 0
   335  000026                     ___lwmod@dividend:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x25
   339  000026                     	ds	1
   340  000027                     ??_decimel_to_bcd:
   341  000027                     LCDPutStr@i:
   342                           	opt stack 0
   343  000027                     RTC_READ_TIME@day:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x26
   347  000027                     	ds	1
   348  000028                     LCDGoto@pos:
   349                           	opt stack 0
   350  000028                     ___lwmod@divisor:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x27
   354  000028                     	ds	1
   355  000029                     decimel_to_bcd@num:
   356                           	opt stack 0
   357  000029                     RTC_READ_TIME@date:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x28
   361  000029                     	ds	1
   362  00002A                     RTC_WRITE_TIME@minute:
   363                           	opt stack 0
   364  00002A                     ___lwmod@counter:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x29
   368  00002A                     	ds	1
   369  00002B                     ?_sprintf:
   370                           	opt stack 0
   371  00002B                     RTC_WRITE_TIME@hour:
   372                           	opt stack 0
   373  00002B                     RTC_READ_TIME@month:
   374                           	opt stack 0
   375  00002B                     sprintf@sp:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x2A
   379  00002B                     	ds	1
   380  00002C                     RTC_WRITE_TIME@day:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x2B
   384  00002C                     	ds	1
   385  00002D                     RTC_WRITE_TIME@date:
   386                           	opt stack 0
   387  00002D                     RTC_READ_TIME@year:
   388                           	opt stack 0
   389  00002D                     sprintf@f:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x2C
   393  00002D                     	ds	1
   394  00002E                     RTC_WRITE_TIME@month:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x2D
   398  00002E                     	ds	1
   399  00002F                     RTC_WRITE_TIME@year:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x2E
   403  00002F                     	ds	1
   404  000030                     RTC_WRITE_TIME@second:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x2F
   408  000030                     	ds	3
   409  000033                     ??_sprintf:
   410                           
   411                           ; 0 bytes @ 0x32
   412  000033                     	ds	4
   413  000037                     sprintf@ap:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x36
   417  000037                     	ds	2
   418  000039                     sprintf@prec:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x38
   422  000039                     	ds	1
   423  00003A                     sprintf@flag:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x39
   427  00003A                     	ds	1
   428  00003B                     sprintf@val:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x3A
   432  00003B                     	ds	2
   433  00003D                     sprintf@width:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x3C
   437  00003D                     	ds	2
   438  00003F                     sprintf@c:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x3E
   442  00003F                     	ds	1
   443  000040                     tblptru	equ	0xFF8
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           
   447                           ; 0 bytes @ 0x3F
   448 ;;
   449 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   450 ;;
   451 ;; *************** function _main *****************
   452 ;; Defined at:
   453 ;;		line 18 in file "newmain.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;		None               void
   460 ;; Registers used:
   461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   471 ;;Total ram usage:        0 bytes
   472 ;; Hardware stack levels required when called:    4
   473 ;; This function calls:
   474 ;;		_ADC_init
   475 ;;		_ADC_start
   476 ;;		_I2C_Master_Init
   477 ;;		_LCDGoto
   478 ;;		_LCDPutCmd
   479 ;;		_LCDPutStr
   480 ;;		_LCD_Initialize
   481 ;;		_RTC_READ_TIME
   482 ;;		_RTC_WRITE_TIME
   483 ;;		_pwm_init
   484 ;;		_pwm_set_duty
   485 ;;		_pwm_start
   486 ;;		_sprintf
   487 ;; This function is called by:
   488 ;;		Startup code after reset
   489 ;; This function uses a non-reentrant model
   490 ;;
   491                           
   492                           	psect	text0
   493  00102E                     __ptext0:
   494                           	opt stack 0
   495  00102E                     _main:
   496                           	opt stack 27
   497                           
   498                           ;newmain.c: 20: OSCCON = 0x76;
   499                           
   500                           ;incstack = 0
   501  00102E  0E76               	movlw	118
   502  001030  6ED3               	movwf	4051,c	;volatile
   503                           
   504                           ;newmain.c: 22: LCD_Initialize();
   505  001032  ECA9  F00D         	call	_LCD_Initialize	;wreg free
   506                           
   507                           ;newmain.c: 23: I2C_Master_Init();
   508  001036  ECAC  F00E         	call	_I2C_Master_Init	;wreg free
   509                           
   510                           ;newmain.c: 24: pwm_init();
   511  00103A  EC87  F00E         	call	_pwm_init	;wreg free
   512                           
   513                           ;newmain.c: 25: ADC_init(1);
   514  00103E  0E01               	movlw	1
   515  001040  EC77  F00E         	call	_ADC_init
   516                           
   517                           ;newmain.c: 27: RTC_WRITE_TIME(0, 00, 16, 3, 1, 3, 22);
   518  001044  0E00               	movlw	0
   519  001046  6E2A               	movwf	RTC_WRITE_TIME@minute,c
   520  001048  0E10               	movlw	16
   521  00104A  6E2B               	movwf	RTC_WRITE_TIME@hour,c
   522  00104C  0E03               	movlw	3
   523  00104E  6E2C               	movwf	RTC_WRITE_TIME@day,c
   524  001050  0E01               	movlw	1
   525  001052  6E2D               	movwf	RTC_WRITE_TIME@date,c
   526  001054  0E03               	movlw	3
   527  001056  6E2E               	movwf	RTC_WRITE_TIME@month,c
   528  001058  0E16               	movlw	22
   529  00105A  6E2F               	movwf	RTC_WRITE_TIME@year,c
   530  00105C  0E00               	movlw	0
   531  00105E  ECF7  F00C         	call	_RTC_WRITE_TIME
   532  001062  D000               	goto	l1853
   533  001064                     l1853:
   534                           
   535                           ;newmain.c: 31: RTC_READ_TIME(&second, &minute, &hour, &day, &date, &month, &year);
   536  001064  0E59               	movlw	low _second
   537  001066  6E21               	movwf	RTC_READ_TIME@second,c
   538  001068  0E00               	movlw	high _second
   539  00106A  6E22               	movwf	RTC_READ_TIME@second+1,c
   540  00106C  0E57               	movlw	low _minute
   541  00106E  6E23               	movwf	RTC_READ_TIME@minute,c
   542  001070  0E00               	movlw	high _minute
   543  001072  6E24               	movwf	RTC_READ_TIME@minute+1,c
   544  001074  0E56               	movlw	low _hour
   545  001076  6E25               	movwf	RTC_READ_TIME@hour,c
   546  001078  0E00               	movlw	high _hour
   547  00107A  6E26               	movwf	RTC_READ_TIME@hour+1,c
   548  00107C  0E55               	movlw	low _day
   549  00107E  6E27               	movwf	RTC_READ_TIME@day,c
   550  001080  0E00               	movlw	high _day
   551  001082  6E28               	movwf	RTC_READ_TIME@day+1,c
   552  001084  0E54               	movlw	low _date
   553  001086  6E29               	movwf	RTC_READ_TIME@date,c
   554  001088  0E00               	movlw	high _date
   555  00108A  6E2A               	movwf	RTC_READ_TIME@date+1,c
   556  00108C  0E58               	movlw	low _month
   557  00108E  6E2B               	movwf	RTC_READ_TIME@month,c
   558  001090  0E00               	movlw	high _month
   559  001092  6E2C               	movwf	RTC_READ_TIME@month+1,c
   560  001094  0E5A               	movlw	low _year
   561  001096  6E2D               	movwf	RTC_READ_TIME@year,c
   562  001098  0E00               	movlw	high _year
   563  00109A  6E2E               	movwf	RTC_READ_TIME@year+1,c
   564  00109C  EC45  F00B         	call	_RTC_READ_TIME	;wreg free
   565                           
   566                           ;newmain.c: 32: result = ADC_start(0);
   567  0010A0  0E00               	movlw	0
   568  0010A2  EC67  F00E         	call	_ADC_start
   569  0010A6  C01F  F040         	movff	?_ADC_start,_result
   570  0010AA  C020  F041         	movff	?_ADC_start+1,_result+1
   571                           
   572                           ;newmain.c: 34: if ((hour >= 7)&&(hour < 16)) {
   573  0010AE  0E06               	movlw	6
   574  0010B0  6456               	cpfsgt	_hour,c
   575  0010B2  D033               	goto	l1871
   576  0010B4  0E10               	movlw	16
   577  0010B6  6056               	cpfslt	_hour,c
   578  0010B8  D030               	goto	l1871
   579                           
   580                           ;newmain.c: 36: pwm_set_duty(0);
   581  0010BA  0E00               	movlw	0
   582  0010BC  6E20               	movwf	pwm_set_duty@duty+1,c
   583  0010BE  0E00               	movlw	0
   584  0010C0  6E1F               	movwf	pwm_set_duty@duty,c
   585  0010C2  ECFF  F00D         	call	_pwm_set_duty	;wreg free
   586                           
   587                           ;newmain.c: 37: LCDPutCmd(0x01);
   588  0010C6  0E01               	movlw	1
   589  0010C8  ECC6  F00D         	call	_LCDPutCmd
   590                           
   591                           ;newmain.c: 39: LCDGoto(4, 0);
   592  0010CC  0E00               	movlw	0
   593  0010CE  6E23               	movwf	LCDGoto@ln,c
   594  0010D0  0E04               	movlw	4
   595  0010D2  EC88  F00D         	call	_LCDGoto
   596                           
   597                           ;newmain.c: 40: sprintf(out, "%2d : %2d", hour, minute);
   598  0010D6  0E44               	movlw	low _out
   599  0010D8  6E2B               	movwf	sprintf@sp,c
   600  0010DA  0E00               	movlw	high _out
   601  0010DC  6E2C               	movwf	sprintf@sp+1,c
   602  0010DE  0E0B               	movlw	low STR_1
   603  0010E0  6E2D               	movwf	sprintf@f,c
   604  0010E2  0E10               	movlw	high STR_1
   605  0010E4  6E2E               	movwf	sprintf@f+1,c
   606  0010E6  C056  F02F         	movff	_hour,?_sprintf+4
   607  0010EA  6A30               	clrf	?_sprintf+5,c
   608  0010EC  C057  F031         	movff	_minute,?_sprintf+6
   609  0010F0  6A32               	clrf	?_sprintf+7,c
   610  0010F2  EC14  F00A         	call	_sprintf	;wreg free
   611                           
   612                           ;newmain.c: 41: LCDPutStr(out);
   613  0010F6  0E44               	movlw	low _out
   614  0010F8  6E23               	movwf	LCDPutStr@str,c
   615  0010FA  0E00               	movlw	high _out
   616  0010FC  6E24               	movwf	LCDPutStr@str+1,c
   617  0010FE  ECB6  F00C         	call	_LCDPutStr	;wreg free
   618                           
   619                           ;newmain.c: 42: LCDGoto(5, 1);
   620  001102  0E01               	movlw	1
   621  001104  6E23               	movwf	LCDGoto@ln,c
   622  001106  0E05               	movlw	5
   623  001108  EC88  F00D         	call	_LCDGoto
   624                           
   625                           ;newmain.c: 43: LCDPutStr("Morning");
   626  00110C  0E15               	movlw	low STR_2
   627  00110E  6E23               	movwf	LCDPutStr@str,c
   628  001110  0E10               	movlw	high STR_2
   629  001112  6E24               	movwf	LCDPutStr@str+1,c
   630  001114  ECB6  F00C         	call	_LCDPutStr	;wreg free
   631                           
   632                           ;newmain.c: 45: } else if (((hour >= 19)&&(hour <= 23)) || ((hour >= 0)&&(hour < 3))) {
   633  001118  D180               	goto	l156
   634  00111A                     l1871:
   635  00111A  0E12               	movlw	18
   636  00111C  6456               	cpfsgt	_hour,c
   637  00111E  D004               	goto	l1875
   638  001120  0E17               	movlw	23
   639  001122  6456               	cpfsgt	_hour,c
   640  001124  D005               	goto	l1877
   641  001126  D000               	goto	l1875
   642  001128                     l1875:
   643  001128  0E03               	movlw	3
   644  00112A  6056               	cpfslt	_hour,c
   645  00112C  D031               	goto	l1887
   646  00112E  D000               	goto	l1877
   647  001130                     l1877:
   648                           
   649                           ;newmain.c: 47: pwm_set_duty(500);
   650  001130  0E01               	movlw	1
   651  001132  6E20               	movwf	pwm_set_duty@duty+1,c
   652  001134  0EF4               	movlw	244
   653  001136  6E1F               	movwf	pwm_set_duty@duty,c
   654  001138  ECFF  F00D         	call	_pwm_set_duty	;wreg free
   655                           
   656                           ;newmain.c: 48: LCDPutCmd(0x01);
   657  00113C  0E01               	movlw	1
   658  00113E  ECC6  F00D         	call	_LCDPutCmd
   659                           
   660                           ;newmain.c: 50: LCDGoto(4, 0);
   661  001142  0E00               	movlw	0
   662  001144  6E23               	movwf	LCDGoto@ln,c
   663  001146  0E04               	movlw	4
   664  001148  EC88  F00D         	call	_LCDGoto
   665                           
   666                           ;newmain.c: 51: sprintf(out, "%2d : %2d", hour, minute);
   667  00114C  0E44               	movlw	low _out
   668  00114E  6E2B               	movwf	sprintf@sp,c
   669  001150  0E00               	movlw	high _out
   670  001152  6E2C               	movwf	sprintf@sp+1,c
   671  001154  0E0B               	movlw	low STR_1
   672  001156  6E2D               	movwf	sprintf@f,c
   673  001158  0E10               	movlw	high STR_1
   674  00115A  6E2E               	movwf	sprintf@f+1,c
   675  00115C  C056  F02F         	movff	_hour,?_sprintf+4
   676  001160  6A30               	clrf	?_sprintf+5,c
   677  001162  C057  F031         	movff	_minute,?_sprintf+6
   678  001166  6A32               	clrf	?_sprintf+7,c
   679  001168  EC14  F00A         	call	_sprintf	;wreg free
   680                           
   681                           ;newmain.c: 52: LCDPutStr(out);
   682  00116C  0E44               	movlw	low _out
   683  00116E  6E23               	movwf	LCDPutStr@str,c
   684  001170  0E00               	movlw	high _out
   685  001172  6E24               	movwf	LCDPutStr@str+1,c
   686  001174  ECB6  F00C         	call	_LCDPutStr	;wreg free
   687                           
   688                           ;newmain.c: 53: LCDGoto(5, 1);
   689  001178  0E01               	movlw	1
   690  00117A  6E23               	movwf	LCDGoto@ln,c
   691  00117C  0E05               	movlw	5
   692  00117E  EC88  F00D         	call	_LCDGoto
   693                           
   694                           ;newmain.c: 54: LCDPutStr("Night");
   695  001182  0E1D               	movlw	low STR_4
   696  001184  6E23               	movwf	LCDPutStr@str,c
   697  001186  0E10               	movlw	high STR_4
   698  001188  6E24               	movwf	LCDPutStr@str+1,c
   699  00118A  ECB6  F00C         	call	_LCDPutStr	;wreg free
   700                           
   701                           ;newmain.c: 56: } else if (((hour >= 3)&&(hour <= 7)) || ((hour >= 16)&&(hour < 19))) {
   702  00118E  D145               	goto	l156
   703  001190                     l1887:
   704  001190  0E02               	movlw	2
   705  001192  6456               	cpfsgt	_hour,c
   706  001194  D004               	goto	l1891
   707  001196  0E07               	movlw	7
   708  001198  6456               	cpfsgt	_hour,c
   709  00119A  D007               	goto	l144
   710  00119C  D000               	goto	l1891
   711  00119E                     l1891:
   712  00119E  0E0F               	movlw	15
   713  0011A0  6456               	cpfsgt	_hour,c
   714  0011A2  D13B               	goto	l156
   715  0011A4  0E13               	movlw	19
   716  0011A6  6056               	cpfslt	_hour,c
   717  0011A8  D138               	goto	l156
   718  0011AA                     l144:
   719                           
   720                           ;newmain.c: 57: GO_DONE = 1;
   721  0011AA  82C2               	bsf	4034,1,c	;volatile
   722                           
   723                           ;newmain.c: 58: if ((result > 0)&&(result < 500)) {
   724  0011AC  BE41               	btfsc	_result+1,7,c
   725  0011AE  D03D               	goto	l1909
   726  0011B0  5041               	movf	_result+1,w,c
   727  0011B2  E103               	bnz	u1220
   728  0011B4  0440               	decf	_result,w,c
   729  0011B6  A0D8               	btfss	status,0,c
   730  0011B8  D038               	goto	l1909
   731  0011BA                     u1220:
   732  0011BA  BE41               	btfsc	_result+1,7,c
   733  0011BC  D006               	goto	l1899
   734  0011BE  0EF4               	movlw	244
   735  0011C0  5C40               	subwf	_result,w,c
   736  0011C2  0E01               	movlw	1
   737  0011C4  5841               	subwfb	_result+1,w,c
   738  0011C6  B0D8               	btfsc	status,0,c
   739  0011C8  D030               	goto	l1909
   740  0011CA                     l1899:
   741                           
   742                           ;newmain.c: 60: pwm_set_duty(0);
   743  0011CA  0E00               	movlw	0
   744  0011CC  6E20               	movwf	pwm_set_duty@duty+1,c
   745  0011CE  0E00               	movlw	0
   746  0011D0  6E1F               	movwf	pwm_set_duty@duty,c
   747  0011D2  ECFF  F00D         	call	_pwm_set_duty	;wreg free
   748                           
   749                           ;newmain.c: 61: LCDPutCmd(0x01);
   750  0011D6  0E01               	movlw	1
   751  0011D8  ECC6  F00D         	call	_LCDPutCmd
   752                           
   753                           ;newmain.c: 63: LCDGoto(4, 0);
   754  0011DC  0E00               	movlw	0
   755  0011DE  6E23               	movwf	LCDGoto@ln,c
   756  0011E0  0E04               	movlw	4
   757  0011E2  EC88  F00D         	call	_LCDGoto
   758                           
   759                           ;newmain.c: 64: sprintf(out, "%2d : %2d", hour, minute);
   760  0011E6  0E44               	movlw	low _out
   761  0011E8  6E2B               	movwf	sprintf@sp,c
   762  0011EA  0E00               	movlw	high _out
   763  0011EC  6E2C               	movwf	sprintf@sp+1,c
   764  0011EE  0E0B               	movlw	low STR_1
   765  0011F0  6E2D               	movwf	sprintf@f,c
   766  0011F2  0E10               	movlw	high STR_1
   767  0011F4  6E2E               	movwf	sprintf@f+1,c
   768  0011F6  C056  F02F         	movff	_hour,?_sprintf+4
   769  0011FA  6A30               	clrf	?_sprintf+5,c
   770  0011FC  C057  F031         	movff	_minute,?_sprintf+6
   771  001200  6A32               	clrf	?_sprintf+7,c
   772  001202  EC14  F00A         	call	_sprintf	;wreg free
   773                           
   774                           ;newmain.c: 65: LCDPutStr(out);
   775  001206  0E44               	movlw	low _out
   776  001208  6E23               	movwf	LCDPutStr@str,c
   777  00120A  0E00               	movlw	high _out
   778  00120C  6E24               	movwf	LCDPutStr@str+1,c
   779  00120E  ECB6  F00C         	call	_LCDPutStr	;wreg free
   780                           
   781                           ;newmain.c: 66: LCDGoto(5, 1);
   782  001212  0E01               	movlw	1
   783  001214  6E23               	movwf	LCDGoto@ln,c
   784  001216  0E05               	movlw	5
   785  001218  EC88  F00D         	call	_LCDGoto
   786                           
   787                           ;newmain.c: 67: LCDPutStr("Morning");
   788  00121C  0E15               	movlw	low STR_2
   789  00121E  6E23               	movwf	LCDPutStr@str,c
   790  001220  0E10               	movlw	high STR_2
   791  001222  6E24               	movwf	LCDPutStr@str+1,c
   792  001224  ECB6  F00C         	call	_LCDPutStr	;wreg free
   793                           
   794                           ;newmain.c: 69: } else if ((result > 500)&&(result < 600)) {
   795  001228  D0F8               	goto	l156
   796  00122A                     l1909:
   797  00122A  BE41               	btfsc	_result+1,7,c
   798  00122C  D03E               	goto	l1923
   799  00122E  0EF5               	movlw	245
   800  001230  5C40               	subwf	_result,w,c
   801  001232  0E01               	movlw	1
   802  001234  5841               	subwfb	_result+1,w,c
   803  001236  A0D8               	btfss	status,0,c
   804  001238  D038               	goto	l1923
   805  00123A  BE41               	btfsc	_result+1,7,c
   806  00123C  D006               	goto	l1913
   807  00123E  0E58               	movlw	88
   808  001240  5C40               	subwf	_result,w,c
   809  001242  0E02               	movlw	2
   810  001244  5841               	subwfb	_result+1,w,c
   811  001246  B0D8               	btfsc	status,0,c
   812  001248  D030               	goto	l1923
   813  00124A                     l1913:
   814                           
   815                           ;newmain.c: 71: pwm_set_duty(100);
   816  00124A  0E00               	movlw	0
   817  00124C  6E20               	movwf	pwm_set_duty@duty+1,c
   818  00124E  0E64               	movlw	100
   819  001250  6E1F               	movwf	pwm_set_duty@duty,c
   820  001252  ECFF  F00D         	call	_pwm_set_duty	;wreg free
   821                           
   822                           ;newmain.c: 72: LCDPutCmd(0x01);
   823  001256  0E01               	movlw	1
   824  001258  ECC6  F00D         	call	_LCDPutCmd
   825                           
   826                           ;newmain.c: 74: LCDGoto(4, 0);
   827  00125C  0E00               	movlw	0
   828  00125E  6E23               	movwf	LCDGoto@ln,c
   829  001260  0E04               	movlw	4
   830  001262  EC88  F00D         	call	_LCDGoto
   831                           
   832                           ;newmain.c: 75: sprintf(out, "%2d : %2d", hour, minute);
   833  001266  0E44               	movlw	low _out
   834  001268  6E2B               	movwf	sprintf@sp,c
   835  00126A  0E00               	movlw	high _out
   836  00126C  6E2C               	movwf	sprintf@sp+1,c
   837  00126E  0E0B               	movlw	low STR_1
   838  001270  6E2D               	movwf	sprintf@f,c
   839  001272  0E10               	movlw	high STR_1
   840  001274  6E2E               	movwf	sprintf@f+1,c
   841  001276  C056  F02F         	movff	_hour,?_sprintf+4
   842  00127A  6A30               	clrf	?_sprintf+5,c
   843  00127C  C057  F031         	movff	_minute,?_sprintf+6
   844  001280  6A32               	clrf	?_sprintf+7,c
   845  001282  EC14  F00A         	call	_sprintf	;wreg free
   846                           
   847                           ;newmain.c: 76: LCDPutStr(out);
   848  001286  0E44               	movlw	low _out
   849  001288  6E23               	movwf	LCDPutStr@str,c
   850  00128A  0E00               	movlw	high _out
   851  00128C  6E24               	movwf	LCDPutStr@str+1,c
   852  00128E  ECB6  F00C         	call	_LCDPutStr	;wreg free
   853                           
   854                           ;newmain.c: 77: LCDGoto(5, 1);
   855  001292  0E01               	movlw	1
   856  001294  6E23               	movwf	LCDGoto@ln,c
   857  001296  0E05               	movlw	5
   858  001298  EC88  F00D         	call	_LCDGoto
   859                           
   860                           ;newmain.c: 78: LCDPutStr("M1");
   861  00129C  0E23               	movlw	low STR_8
   862  00129E  6E23               	movwf	LCDPutStr@str,c
   863  0012A0  0E10               	movlw	high STR_8
   864  0012A2  6E24               	movwf	LCDPutStr@str+1,c
   865  0012A4  ECB6  F00C         	call	_LCDPutStr	;wreg free
   866                           
   867                           ;newmain.c: 79: } else if ((result > 600)&&(result < 700)) {
   868  0012A8  D0B8               	goto	l156
   869  0012AA                     l1923:
   870  0012AA  BE41               	btfsc	_result+1,7,c
   871  0012AC  D03E               	goto	l1937
   872  0012AE  0E59               	movlw	89
   873  0012B0  5C40               	subwf	_result,w,c
   874  0012B2  0E02               	movlw	2
   875  0012B4  5841               	subwfb	_result+1,w,c
   876  0012B6  A0D8               	btfss	status,0,c
   877  0012B8  D038               	goto	l1937
   878  0012BA  BE41               	btfsc	_result+1,7,c
   879  0012BC  D006               	goto	l1927
   880  0012BE  0EBC               	movlw	188
   881  0012C0  5C40               	subwf	_result,w,c
   882  0012C2  0E02               	movlw	2
   883  0012C4  5841               	subwfb	_result+1,w,c
   884  0012C6  B0D8               	btfsc	status,0,c
   885  0012C8  D030               	goto	l1937
   886  0012CA                     l1927:
   887                           
   888                           ;newmain.c: 81: pwm_set_duty(225);
   889  0012CA  0E00               	movlw	0
   890  0012CC  6E20               	movwf	pwm_set_duty@duty+1,c
   891  0012CE  0EE1               	movlw	225
   892  0012D0  6E1F               	movwf	pwm_set_duty@duty,c
   893  0012D2  ECFF  F00D         	call	_pwm_set_duty	;wreg free
   894                           
   895                           ;newmain.c: 82: LCDPutCmd(0x01);
   896  0012D6  0E01               	movlw	1
   897  0012D8  ECC6  F00D         	call	_LCDPutCmd
   898                           
   899                           ;newmain.c: 84: LCDGoto(4, 0);
   900  0012DC  0E00               	movlw	0
   901  0012DE  6E23               	movwf	LCDGoto@ln,c
   902  0012E0  0E04               	movlw	4
   903  0012E2  EC88  F00D         	call	_LCDGoto
   904                           
   905                           ;newmain.c: 85: sprintf(out, "%2d : %2d", hour, minute);
   906  0012E6  0E44               	movlw	low _out
   907  0012E8  6E2B               	movwf	sprintf@sp,c
   908  0012EA  0E00               	movlw	high _out
   909  0012EC  6E2C               	movwf	sprintf@sp+1,c
   910  0012EE  0E0B               	movlw	low STR_1
   911  0012F0  6E2D               	movwf	sprintf@f,c
   912  0012F2  0E10               	movlw	high STR_1
   913  0012F4  6E2E               	movwf	sprintf@f+1,c
   914  0012F6  C056  F02F         	movff	_hour,?_sprintf+4
   915  0012FA  6A30               	clrf	?_sprintf+5,c
   916  0012FC  C057  F031         	movff	_minute,?_sprintf+6
   917  001300  6A32               	clrf	?_sprintf+7,c
   918  001302  EC14  F00A         	call	_sprintf	;wreg free
   919                           
   920                           ;newmain.c: 86: LCDPutStr(out);
   921  001306  0E44               	movlw	low _out
   922  001308  6E23               	movwf	LCDPutStr@str,c
   923  00130A  0E00               	movlw	high _out
   924  00130C  6E24               	movwf	LCDPutStr@str+1,c
   925  00130E  ECB6  F00C         	call	_LCDPutStr	;wreg free
   926                           
   927                           ;newmain.c: 87: LCDGoto(5, 1);
   928  001312  0E01               	movlw	1
   929  001314  6E23               	movwf	LCDGoto@ln,c
   930  001316  0E05               	movlw	5
   931  001318  EC88  F00D         	call	_LCDGoto
   932                           
   933                           ;newmain.c: 88: LCDPutStr("M2");
   934  00131C  0E26               	movlw	low STR_10
   935  00131E  6E23               	movwf	LCDPutStr@str,c
   936  001320  0E10               	movlw	high STR_10
   937  001322  6E24               	movwf	LCDPutStr@str+1,c
   938  001324  ECB6  F00C         	call	_LCDPutStr	;wreg free
   939                           
   940                           ;newmain.c: 89: } else if ((result > 700)&&(result < 800)) {
   941  001328  D078               	goto	l156
   942  00132A                     l1937:
   943  00132A  BE41               	btfsc	_result+1,7,c
   944  00132C  D03E               	goto	l1951
   945  00132E  0EBD               	movlw	189
   946  001330  5C40               	subwf	_result,w,c
   947  001332  0E02               	movlw	2
   948  001334  5841               	subwfb	_result+1,w,c
   949  001336  A0D8               	btfss	status,0,c
   950  001338  D038               	goto	l1951
   951  00133A  BE41               	btfsc	_result+1,7,c
   952  00133C  D006               	goto	l1941
   953  00133E  0E20               	movlw	32
   954  001340  5C40               	subwf	_result,w,c
   955  001342  0E03               	movlw	3
   956  001344  5841               	subwfb	_result+1,w,c
   957  001346  B0D8               	btfsc	status,0,c
   958  001348  D030               	goto	l1951
   959  00134A                     l1941:
   960                           
   961                           ;newmain.c: 91: pwm_set_duty(350);
   962  00134A  0E01               	movlw	1
   963  00134C  6E20               	movwf	pwm_set_duty@duty+1,c
   964  00134E  0E5E               	movlw	94
   965  001350  6E1F               	movwf	pwm_set_duty@duty,c
   966  001352  ECFF  F00D         	call	_pwm_set_duty	;wreg free
   967                           
   968                           ;newmain.c: 92: LCDPutCmd(0x01);
   969  001356  0E01               	movlw	1
   970  001358  ECC6  F00D         	call	_LCDPutCmd
   971                           
   972                           ;newmain.c: 94: LCDGoto(4, 0);
   973  00135C  0E00               	movlw	0
   974  00135E  6E23               	movwf	LCDGoto@ln,c
   975  001360  0E04               	movlw	4
   976  001362  EC88  F00D         	call	_LCDGoto
   977                           
   978                           ;newmain.c: 95: sprintf(out, "%2d : %2d", hour, minute);
   979  001366  0E44               	movlw	low _out
   980  001368  6E2B               	movwf	sprintf@sp,c
   981  00136A  0E00               	movlw	high _out
   982  00136C  6E2C               	movwf	sprintf@sp+1,c
   983  00136E  0E0B               	movlw	low STR_1
   984  001370  6E2D               	movwf	sprintf@f,c
   985  001372  0E10               	movlw	high STR_1
   986  001374  6E2E               	movwf	sprintf@f+1,c
   987  001376  C056  F02F         	movff	_hour,?_sprintf+4
   988  00137A  6A30               	clrf	?_sprintf+5,c
   989  00137C  C057  F031         	movff	_minute,?_sprintf+6
   990  001380  6A32               	clrf	?_sprintf+7,c
   991  001382  EC14  F00A         	call	_sprintf	;wreg free
   992                           
   993                           ;newmain.c: 96: LCDPutStr(out);
   994  001386  0E44               	movlw	low _out
   995  001388  6E23               	movwf	LCDPutStr@str,c
   996  00138A  0E00               	movlw	high _out
   997  00138C  6E24               	movwf	LCDPutStr@str+1,c
   998  00138E  ECB6  F00C         	call	_LCDPutStr	;wreg free
   999                           
  1000                           ;newmain.c: 97: LCDGoto(5, 1);
  1001  001392  0E01               	movlw	1
  1002  001394  6E23               	movwf	LCDGoto@ln,c
  1003  001396  0E05               	movlw	5
  1004  001398  EC88  F00D         	call	_LCDGoto
  1005                           
  1006                           ;newmain.c: 98: LCDPutStr("M3");
  1007  00139C  0E29               	movlw	low STR_12
  1008  00139E  6E23               	movwf	LCDPutStr@str,c
  1009  0013A0  0E10               	movlw	high STR_12
  1010  0013A2  6E24               	movwf	LCDPutStr@str+1,c
  1011  0013A4  ECB6  F00C         	call	_LCDPutStr	;wreg free
  1012                           
  1013                           ;newmain.c: 99: } else if (result > 800) {
  1014  0013A8  D038               	goto	l156
  1015  0013AA                     l1951:
  1016  0013AA  BE41               	btfsc	_result+1,7,c
  1017  0013AC  D036               	goto	l156
  1018  0013AE  0E21               	movlw	33
  1019  0013B0  5C40               	subwf	_result,w,c
  1020  0013B2  0E03               	movlw	3
  1021  0013B4  5841               	subwfb	_result+1,w,c
  1022  0013B6  A0D8               	btfss	status,0,c
  1023  0013B8  D030               	goto	l156
  1024                           
  1025                           ;newmain.c: 101: pwm_set_duty(500);
  1026  0013BA  0E01               	movlw	1
  1027  0013BC  6E20               	movwf	pwm_set_duty@duty+1,c
  1028  0013BE  0EF4               	movlw	244
  1029  0013C0  6E1F               	movwf	pwm_set_duty@duty,c
  1030  0013C2  ECFF  F00D         	call	_pwm_set_duty	;wreg free
  1031                           
  1032                           ;newmain.c: 102: LCDPutCmd(0x01);
  1033  0013C6  0E01               	movlw	1
  1034  0013C8  ECC6  F00D         	call	_LCDPutCmd
  1035                           
  1036                           ;newmain.c: 104: LCDGoto(4, 0);
  1037  0013CC  0E00               	movlw	0
  1038  0013CE  6E23               	movwf	LCDGoto@ln,c
  1039  0013D0  0E04               	movlw	4
  1040  0013D2  EC88  F00D         	call	_LCDGoto
  1041                           
  1042                           ;newmain.c: 105: sprintf(out, "%2d : %2d", hour, minute);
  1043  0013D6  0E44               	movlw	low _out
  1044  0013D8  6E2B               	movwf	sprintf@sp,c
  1045  0013DA  0E00               	movlw	high _out
  1046  0013DC  6E2C               	movwf	sprintf@sp+1,c
  1047  0013DE  0E0B               	movlw	low STR_1
  1048  0013E0  6E2D               	movwf	sprintf@f,c
  1049  0013E2  0E10               	movlw	high STR_1
  1050  0013E4  6E2E               	movwf	sprintf@f+1,c
  1051  0013E6  C056  F02F         	movff	_hour,?_sprintf+4
  1052  0013EA  6A30               	clrf	?_sprintf+5,c
  1053  0013EC  C057  F031         	movff	_minute,?_sprintf+6
  1054  0013F0  6A32               	clrf	?_sprintf+7,c
  1055  0013F2  EC14  F00A         	call	_sprintf	;wreg free
  1056                           
  1057                           ;newmain.c: 106: LCDPutStr(out);
  1058  0013F6  0E44               	movlw	low _out
  1059  0013F8  6E23               	movwf	LCDPutStr@str,c
  1060  0013FA  0E00               	movlw	high _out
  1061  0013FC  6E24               	movwf	LCDPutStr@str+1,c
  1062  0013FE  ECB6  F00C         	call	_LCDPutStr	;wreg free
  1063                           
  1064                           ;newmain.c: 107: LCDGoto(5, 1);
  1065  001402  0E01               	movlw	1
  1066  001404  6E23               	movwf	LCDGoto@ln,c
  1067  001406  0E05               	movlw	5
  1068  001408  EC88  F00D         	call	_LCDGoto
  1069                           
  1070                           ;newmain.c: 108: LCDPutStr("Night");
  1071  00140C  0E1D               	movlw	low STR_4
  1072  00140E  6E23               	movwf	LCDPutStr@str,c
  1073  001410  0E10               	movlw	high STR_4
  1074  001412  6E24               	movwf	LCDPutStr@str+1,c
  1075  001414  ECB6  F00C         	call	_LCDPutStr	;wreg free
  1076                           
  1077                           ;newmain.c: 109: }
  1078                           ;newmain.c: 110: }
  1079                           ;newmain.c: 111: while (GO_DONE);
  1080  001418  D000               	goto	l156
  1081  00141A                     l156:
  1082  00141A  B2C2               	btfsc	4034,1,c	;volatile
  1083  00141C  D7FE               	goto	l156
  1084                           
  1085                           ;newmain.c: 112: pwm_start();
  1086  00141E  ECEA  F00E         	call	_pwm_start	;wreg free
  1087  001422  D620               	goto	l1853
  1088  001424  EF52  F000         	goto	start
  1089  001428                     __end_of_main:
  1090                           	opt stack 0
  1091                           tblptru	equ	0xFF8
  1092                           postinc0	equ	0xFEE
  1093                           wreg	equ	0xFE8
  1094                           status	equ	0xFD8
  1095                           
  1096 ;; *************** function _sprintf *****************
  1097 ;; Defined at:
  1098 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  sp              2   42[COMRAM] PTR unsigned char 
  1101 ;;		 -> out(16), 
  1102 ;;  f               2   44[COMRAM] PTR const unsigned char 
  1103 ;;		 -> STR_13(10), STR_11(10), STR_9(10), STR_7(10), 
  1104 ;;		 -> STR_5(10), STR_3(10), STR_1(10), 
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;  tmpval          4    0        struct .
  1107 ;;  cp              3    0        PTR const unsigned char 
  1108 ;;  width           2   60[COMRAM] int 
  1109 ;;  val             2   58[COMRAM] unsigned int 
  1110 ;;  ap              2   54[COMRAM] PTR void [1]
  1111 ;;		 -> ?_sprintf(2), 
  1112 ;;  len             2    0        unsigned int 
  1113 ;;  c               1   62[COMRAM] char 
  1114 ;;  flag            1   57[COMRAM] unsigned char 
  1115 ;;  prec            1   56[COMRAM] char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  2   42[COMRAM] int 
  1118 ;; Registers used:
  1119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1125 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1126 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1127 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1128 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1129 ;;Total ram usage:       21 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    2
  1132 ;; This function calls:
  1133 ;;		___lwdiv
  1134 ;;		___lwmod
  1135 ;;		___wmul
  1136 ;;		_isdigit
  1137 ;; This function is called by:
  1138 ;;		_main
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text1
  1143  001428                     __ptext1:
  1144                           	opt stack 0
  1145  001428                     _sprintf:
  1146                           	opt stack 28
  1147                           
  1148                           ;doprnt.c: 494: va_list ap;
  1149                           ;doprnt.c: 499: signed char c;
  1150                           ;doprnt.c: 501: int width;
  1151                           ;doprnt.c: 506: signed char prec;
  1152                           ;doprnt.c: 508: unsigned char flag;
  1153                           ;doprnt.c: 523: union {
  1154                           ;doprnt.c: 524: unsigned long vd;
  1155                           ;doprnt.c: 525: double integ;
  1156                           ;doprnt.c: 526: } tmpval;
  1157                           ;doprnt.c: 528: unsigned int val;
  1158                           ;doprnt.c: 529: unsigned len;
  1159                           ;doprnt.c: 530: const char * cp;
  1160                           ;doprnt.c: 533: *ap = __va_start();
  1161                           
  1162                           ;incstack = 0
  1163  001428  0E2F               	movlw	low (?_sprintf+4)
  1164  00142A  6E37               	movwf	sprintf@ap,c
  1165  00142C  0E00               	movlw	high (?_sprintf+4)
  1166  00142E  6E38               	movwf	sprintf@ap+1,c
  1167                           
  1168                           ;doprnt.c: 536: while(c = *f++) {
  1169  001430  D116               	goto	l1835
  1170  001432                     l1751:
  1171                           
  1172                           ;doprnt.c: 538: if(c != '%')
  1173  001432  0E25               	movlw	37
  1174  001434  183F               	xorwf	sprintf@c,w,c
  1175  001436  B4D8               	btfsc	status,2,c
  1176  001438  D009               	goto	l1757
  1177                           
  1178                           ;doprnt.c: 540: {
  1179                           ;doprnt.c: 541: ((*sp++ = (c)));
  1180  00143A  C02B  FFD9         	movff	sprintf@sp,fsr2l
  1181  00143E  C02C  FFDA         	movff	sprintf@sp+1,fsr2h
  1182  001442  C03F  FFDF         	movff	sprintf@c,indf2
  1183  001446  4A2B               	infsnz	sprintf@sp,f,c
  1184  001448  2A2C               	incf	sprintf@sp+1,f,c
  1185                           
  1186                           ;doprnt.c: 542: continue;
  1187  00144A  D109               	goto	l1835
  1188  00144C                     l1757:
  1189                           
  1190                           ;doprnt.c: 543: }
  1191                           ;doprnt.c: 546: width = 0;
  1192  00144C  0E00               	movlw	0
  1193  00144E  6E3E               	movwf	sprintf@width+1,c
  1194  001450  0E00               	movlw	0
  1195  001452  6E3D               	movwf	sprintf@width,c
  1196                           
  1197                           ;doprnt.c: 548: flag = 0;
  1198  001454  0E00               	movlw	0
  1199  001456  6E3A               	movwf	sprintf@flag,c
  1200                           
  1201                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1202  001458  C02D  FFF6         	movff	sprintf@f,tblptrl
  1203  00145C  C02E  FFF7         	movff	sprintf@f+1,tblptrh
  1204  001460                     	if	0	;tblptru may be non-zero
  1205  001460                     	endif
  1206  001460                     	if	0	;tblptru may be non-zero
  1207  001460                     	endif
  1208  001460  0008               	tblrd		*
  1209  001462  50F5               	movf	tablat,w,c
  1210  001464  EC56  F00E         	call	_isdigit
  1211  001468  A0D8               	btfss	status,0,c
  1212  00146A  D039               	goto	l1773
  1213                           
  1214                           ;doprnt.c: 598: width = 0;
  1215  00146C  0E00               	movlw	0
  1216  00146E  6E3E               	movwf	sprintf@width+1,c
  1217  001470  0E00               	movlw	0
  1218  001472  6E3D               	movwf	sprintf@width,c
  1219  001474  D000               	goto	l1763
  1220  001476                     l1763:
  1221                           
  1222                           ;doprnt.c: 600: width *= 10;
  1223  001476  C03D  F01F         	movff	sprintf@width,___wmul@multiplier
  1224  00147A  C03E  F020         	movff	sprintf@width+1,___wmul@multiplier+1
  1225  00147E  0E00               	movlw	0
  1226  001480  6E22               	movwf	___wmul@multiplicand+1,c
  1227  001482  0E0A               	movlw	10
  1228  001484  6E21               	movwf	___wmul@multiplicand,c
  1229  001486  EC42  F00E         	call	___wmul	;wreg free
  1230  00148A  C01F  F03D         	movff	?___wmul,sprintf@width
  1231  00148E  C020  F03E         	movff	?___wmul+1,sprintf@width+1
  1232                           
  1233                           ;doprnt.c: 601: width += *f++ - '0';
  1234  001492  0ED0               	movlw	208
  1235  001494  6E33               	movwf	??_sprintf& (0+255),c
  1236  001496  0EFF               	movlw	255
  1237  001498  6E34               	movwf	(??_sprintf+1)& (0+255),c
  1238  00149A  C02D  FFF6         	movff	sprintf@f,tblptrl
  1239  00149E  C02E  FFF7         	movff	sprintf@f+1,tblptrh
  1240  0014A2                     	if	0	;tblptru may be non-zero
  1241  0014A2                     	endif
  1242  0014A2                     	if	0	;tblptru may be non-zero
  1243  0014A2                     	endif
  1244  0014A2  0008               	tblrd		*
  1245  0014A4  50F5               	movf	tablat,w,c
  1246  0014A6  6E35               	movwf	(??_sprintf+2)& (0+255),c
  1247  0014A8  6A36               	clrf	(??_sprintf+3)& (0+255),c
  1248  0014AA  5033               	movf	??_sprintf,w,c
  1249  0014AC  2635               	addwf	??_sprintf+2,f,c
  1250  0014AE  5034               	movf	??_sprintf+1,w,c
  1251  0014B0  2236               	addwfc	??_sprintf+3,f,c
  1252  0014B2  5035               	movf	??_sprintf+2,w,c
  1253  0014B4  263D               	addwf	sprintf@width,f,c
  1254  0014B6  5036               	movf	??_sprintf+3,w,c
  1255  0014B8  223E               	addwfc	sprintf@width+1,f,c
  1256  0014BA  4A2D               	infsnz	sprintf@f,f,c
  1257  0014BC  2A2E               	incf	sprintf@f+1,f,c
  1258                           
  1259                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1260  0014BE  C02D  FFF6         	movff	sprintf@f,tblptrl
  1261  0014C2  C02E  FFF7         	movff	sprintf@f+1,tblptrh
  1262  0014C6                     	if	0	;tblptru may be non-zero
  1263  0014C6                     	endif
  1264  0014C6                     	if	0	;tblptru may be non-zero
  1265  0014C6                     	endif
  1266  0014C6  0008               	tblrd		*
  1267  0014C8  50F5               	movf	tablat,w,c
  1268  0014CA  EC56  F00E         	call	_isdigit
  1269  0014CE  A0D8               	btfss	status,0,c
  1270  0014D0  D006               	goto	l1773
  1271  0014D2  D7D1               	goto	l1763
  1272                           
  1273                           ;doprnt.c: 608: }
  1274                           ;doprnt.c: 635: switch(c = *f++) {
  1275  0014D4  D004               	goto	l1773
  1276                           
  1277                           ;doprnt.c: 638: goto alldone;
  1278                           
  1279                           ;doprnt.c: 637: case 0:
  1280  0014D6  D0D1               	goto	l1837
  1281                           
  1282                           ;doprnt.c: 698: case 'i':
  1283                           ;doprnt.c: 699: break;
  1284                           
  1285                           ;doprnt.c: 697: case 'd':
  1286  0014D8  D015               	goto	l1775
  1287                           
  1288                           ;doprnt.c: 813: continue;
  1289                           
  1290                           ;doprnt.c: 802: default:
  1291  0014DA  D0C1               	goto	l1835
  1292                           
  1293                           ;doprnt.c: 822: }
  1294  0014DC  D013               	goto	l1775
  1295  0014DE                     l1773:
  1296  0014DE  C02D  FFF6         	movff	sprintf@f,tblptrl
  1297  0014E2  C02E  FFF7         	movff	sprintf@f+1,tblptrh
  1298  0014E6  4A2D               	infsnz	sprintf@f,f,c
  1299  0014E8  2A2E               	incf	sprintf@f+1,f,c
  1300  0014EA                     	if	0	;tblptru may be non-zero
  1301  0014EA                     	endif
  1302  0014EA                     	if	0	;tblptru may be non-zero
  1303  0014EA                     	endif
  1304  0014EA  0008               	tblrd		*
  1305  0014EC  CFF5 F03F          	movff	tablat,sprintf@c
  1306  0014F0  503F               	movf	sprintf@c,w,c
  1307                           
  1308                           ; Switch size 1, requested type "space"
  1309                           ; Number of cases is 3, Range of values is 0 to 105
  1310                           ; switch strategies available:
  1311                           ; Name         Instructions Cycles
  1312                           ; simple_byte           10     6 (average)
  1313                           ;	Chosen strategy is simple_byte
  1314  0014F2  0A00               	xorlw	0	; case 0
  1315  0014F4  B4D8               	btfsc	status,2,c
  1316  0014F6  D0C1               	goto	l1837
  1317  0014F8  0A64               	xorlw	100	; case 100
  1318  0014FA  B4D8               	btfsc	status,2,c
  1319  0014FC  D003               	goto	l1775
  1320  0014FE  0A0D               	xorlw	13	; case 105
  1321  001500  A4D8               	btfss	status,2,c
  1322  001502  D0AD               	goto	l1835
  1323  001504                     l1775:
  1324                           
  1325                           ;doprnt.c: 1253: {
  1326                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1327  001504  C037  FFD9         	movff	sprintf@ap,fsr2l
  1328  001508  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  1329  00150C  CFDE F03B          	movff	postinc2,sprintf@val
  1330  001510  CFDD F03C          	movff	postdec2,sprintf@val+1
  1331  001514  0E02               	movlw	2
  1332  001516  2637               	addwf	sprintf@ap,f,c
  1333  001518  0E00               	movlw	0
  1334  00151A  2238               	addwfc	sprintf@ap+1,f,c
  1335                           
  1336                           ;doprnt.c: 1261: if((int)val < 0) {
  1337  00151C  AE3C               	btfss	sprintf@val+1,7,c
  1338  00151E  D007               	goto	l1785
  1339                           
  1340                           ;doprnt.c: 1262: flag |= 0x03;
  1341  001520  0E03               	movlw	3
  1342  001522  123A               	iorwf	sprintf@flag,f,c
  1343                           
  1344                           ;doprnt.c: 1263: val = -val;
  1345  001524  6C3B               	negf	sprintf@val,c
  1346  001526  1E3C               	comf	sprintf@val+1,f,c
  1347  001528  B0D8               	btfsc	status,0,c
  1348  00152A  2A3C               	incf	sprintf@val+1,f,c
  1349  00152C  D000               	goto	l1785
  1350  00152E                     l1785:
  1351                           
  1352                           ;doprnt.c: 1264: }
  1353                           ;doprnt.c: 1266: }
  1354                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1355  00152E  0E01               	movlw	1
  1356  001530  6E3F               	movwf	sprintf@c,c
  1357  001532                     l1787:
  1358  001532  0E05               	movlw	5
  1359  001534  183F               	xorwf	sprintf@c,w,c
  1360  001536  B4D8               	btfsc	status,2,c
  1361  001538  D016               	goto	l1799
  1362  00153A  D001               	goto	l1791
  1363  00153C  D014               	goto	l1799
  1364  00153E                     l1791:
  1365                           
  1366                           ;doprnt.c: 1306: if(val < dpowers[c])
  1367  00153E  503F               	movf	sprintf@c,w,c
  1368  001540  0D02               	mullw	2
  1369  001542  0E01               	movlw	low _dpowers
  1370  001544  24F3               	addwf	prodl,w,c
  1371  001546  6EF6               	movwf	tblptrl,c
  1372  001548  0E10               	movlw	high _dpowers
  1373  00154A  20F4               	addwfc	prodh,w,c
  1374  00154C  6EF7               	movwf	tblptrh,c
  1375  00154E                     	if	0	;There are less than 3 active tblptr bytes
  1376  00154E                     	endif
  1377  00154E  0009               	tblrd		*+
  1378  001550  50F5               	movf	tablat,w,c
  1379  001552  5C3B               	subwf	sprintf@val,w,c
  1380  001554  0009               	tblrd		*+
  1381  001556  50F5               	movf	tablat,w,c
  1382  001558  583C               	subwfb	sprintf@val+1,w,c
  1383  00155A  A0D8               	btfss	status,0,c
  1384  00155C  D004               	goto	l1799
  1385  00155E  D001               	goto	l1795
  1386                           
  1387                           ;doprnt.c: 1307: break;
  1388  001560  D002               	goto	l1799
  1389  001562                     l1795:
  1390  001562  2A3F               	incf	sprintf@c,f,c
  1391  001564  D7E6               	goto	l1787
  1392  001566                     l1799:
  1393                           
  1394                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1395  001566  503D               	movf	sprintf@width,w,c
  1396  001568  103E               	iorwf	sprintf@width+1,w,c
  1397  00156A  B4D8               	btfsc	status,2,c
  1398  00156C  D00A               	goto	l1805
  1399  00156E  C03A  F033         	movff	sprintf@flag,??_sprintf
  1400  001572  0E03               	movlw	3
  1401  001574  1633               	andwf	??_sprintf,f,c
  1402  001576  B4D8               	btfsc	status,2,c
  1403  001578  D004               	goto	l1805
  1404                           
  1405                           ;doprnt.c: 1346: width--;
  1406  00157A  063D               	decf	sprintf@width,f,c
  1407  00157C  A0D8               	btfss	status,0,c
  1408  00157E  063E               	decf	sprintf@width+1,f,c
  1409  001580  D000               	goto	l1805
  1410  001582                     l1805:
  1411                           
  1412                           ;doprnt.c: 1381: if(width > c)
  1413  001582  0E80               	movlw	128
  1414  001584  BE3F               	btfsc	sprintf@c,7,c
  1415  001586  0E7F               	movlw	127
  1416  001588  6E33               	movwf	??_sprintf& (0+255),c
  1417  00158A  503D               	movf	sprintf@width,w,c
  1418  00158C  5C3F               	subwf	sprintf@c,w,c
  1419  00158E  503E               	movf	sprintf@width+1,w,c
  1420  001590  0A80               	xorlw	128
  1421  001592  5833               	subwfb	??_sprintf& (0+255),w,c
  1422  001594  B0D8               	btfsc	status,0,c
  1423  001596  D007               	goto	l1809
  1424                           
  1425                           ;doprnt.c: 1382: width -= c;
  1426  001598  503F               	movf	sprintf@c,w,c
  1427  00159A  5E3D               	subwf	sprintf@width,f,c
  1428  00159C  0E00               	movlw	0
  1429  00159E  BE3F               	btfsc	sprintf@c,7,c
  1430  0015A0  0EFF               	movlw	255
  1431  0015A2  5A3E               	subwfb	sprintf@width+1,f,c
  1432  0015A4  D005               	goto	l1811
  1433  0015A6                     l1809:
  1434                           
  1435                           ;doprnt.c: 1383: else
  1436                           ;doprnt.c: 1384: width = 0;
  1437  0015A6  0E00               	movlw	0
  1438  0015A8  6E3E               	movwf	sprintf@width+1,c
  1439  0015AA  0E00               	movlw	0
  1440  0015AC  6E3D               	movwf	sprintf@width,c
  1441  0015AE  D000               	goto	l1811
  1442  0015B0                     l1811:
  1443                           
  1444                           ;doprnt.c: 1422: {
  1445                           ;doprnt.c: 1424: if(width
  1446                           ;doprnt.c: 1428: )
  1447  0015B0  503D               	movf	sprintf@width,w,c
  1448  0015B2  103E               	iorwf	sprintf@width+1,w,c
  1449  0015B4  B4D8               	btfsc	status,2,c
  1450  0015B6  D011               	goto	l1819
  1451  0015B8                     l1813:
  1452                           
  1453                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1454  0015B8  C02B  FFD9         	movff	sprintf@sp,fsr2l
  1455  0015BC  C02C  FFDA         	movff	sprintf@sp+1,fsr2h
  1456  0015C0  0E20               	movlw	32
  1457  0015C2  6EDF               	movwf	indf2,c
  1458  0015C4  4A2B               	infsnz	sprintf@sp,f,c
  1459  0015C6  2A2C               	incf	sprintf@sp+1,f,c
  1460                           
  1461                           ;doprnt.c: 1431: while(--width);
  1462  0015C8  063D               	decf	sprintf@width,f,c
  1463  0015CA  A0D8               	btfss	status,0,c
  1464  0015CC  063E               	decf	sprintf@width+1,f,c
  1465  0015CE  503D               	movf	sprintf@width,w,c
  1466  0015D0  103E               	iorwf	sprintf@width+1,w,c
  1467  0015D2  B4D8               	btfsc	status,2,c
  1468  0015D4  D002               	goto	l1819
  1469  0015D6  D7F0               	goto	l1813
  1470  0015D8  D000               	goto	l1819
  1471  0015DA                     l1819:
  1472                           
  1473                           ;doprnt.c: 1438: if(flag & 0x03)
  1474  0015DA  C03A  F033         	movff	sprintf@flag,??_sprintf
  1475  0015DE  0E03               	movlw	3
  1476  0015E0  1633               	andwf	??_sprintf,f,c
  1477  0015E2  B4D8               	btfsc	status,2,c
  1478  0015E4  D009               	goto	l1825
  1479                           
  1480                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1481  0015E6  C02B  FFD9         	movff	sprintf@sp,fsr2l
  1482  0015EA  C02C  FFDA         	movff	sprintf@sp+1,fsr2h
  1483  0015EE  0E2D               	movlw	45
  1484  0015F0  6EDF               	movwf	indf2,c
  1485  0015F2  4A2B               	infsnz	sprintf@sp,f,c
  1486  0015F4  2A2C               	incf	sprintf@sp+1,f,c
  1487  0015F6  D000               	goto	l1825
  1488  0015F8                     l1825:
  1489                           
  1490                           ;doprnt.c: 1469: }
  1491                           ;doprnt.c: 1472: prec = c;
  1492  0015F8  C03F  F039         	movff	sprintf@c,sprintf@prec
  1493                           
  1494                           ;doprnt.c: 1474: while(prec--) {
  1495  0015FC  D02A               	goto	l1833
  1496  0015FE                     l1827:
  1497                           
  1498                           ;doprnt.c: 1478: {
  1499                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1500  0015FE  5039               	movf	sprintf@prec,w,c
  1501  001600  0D02               	mullw	2
  1502  001602  0E01               	movlw	low _dpowers
  1503  001604  24F3               	addwf	prodl,w,c
  1504  001606  6EF6               	movwf	tblptrl,c
  1505  001608  0E10               	movlw	high _dpowers
  1506  00160A  20F4               	addwfc	prodh,w,c
  1507  00160C  6EF7               	movwf	tblptrh,c
  1508  00160E                     	if	0	;There are less than 3 active tblptr bytes
  1509  00160E                     	endif
  1510  00160E  0009               	tblrd		*+
  1511  001610  CFF5 F021          	movff	tablat,___lwdiv@divisor
  1512  001614  000A               	tblrd		*-
  1513  001616  CFF5 F022          	movff	tablat,___lwdiv@divisor+1
  1514  00161A  C03B  F01F         	movff	sprintf@val,___lwdiv@dividend
  1515  00161E  C03C  F020         	movff	sprintf@val+1,___lwdiv@dividend+1
  1516  001622  EC34  F00D         	call	___lwdiv	;wreg free
  1517  001626  C01F  F026         	movff	?___lwdiv,___lwmod@dividend
  1518  00162A  C020  F027         	movff	?___lwdiv+1,___lwmod@dividend+1
  1519  00162E  0E00               	movlw	0
  1520  001630  6E29               	movwf	___lwmod@divisor+1,c
  1521  001632  0E0A               	movlw	10
  1522  001634  6E28               	movwf	___lwmod@divisor,c
  1523  001636  EC62  F00D         	call	___lwmod	;wreg free
  1524  00163A  5026               	movf	?___lwmod,w,c
  1525  00163C  0F30               	addlw	48
  1526  00163E  6E3F               	movwf	sprintf@c,c
  1527                           
  1528                           ;doprnt.c: 1523: }
  1529                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1530  001640  C02B  FFD9         	movff	sprintf@sp,fsr2l
  1531  001644  C02C  FFDA         	movff	sprintf@sp+1,fsr2h
  1532  001648  C03F  FFDF         	movff	sprintf@c,indf2
  1533  00164C  4A2B               	infsnz	sprintf@sp,f,c
  1534  00164E  2A2C               	incf	sprintf@sp+1,f,c
  1535  001650  D000               	goto	l1833
  1536  001652                     l1833:
  1537  001652  0639               	decf	sprintf@prec,f,c
  1538  001654  2839               	incf	sprintf@prec,w,c
  1539  001656  B4D8               	btfsc	status,2,c
  1540  001658  D002               	goto	l1835
  1541  00165A  D7D1               	goto	l1827
  1542  00165C  D000               	goto	l1835
  1543  00165E                     l1835:
  1544  00165E  C02D  FFF6         	movff	sprintf@f,tblptrl
  1545  001662  C02E  FFF7         	movff	sprintf@f+1,tblptrh
  1546  001666  4A2D               	infsnz	sprintf@f,f,c
  1547  001668  2A2E               	incf	sprintf@f+1,f,c
  1548  00166A                     	if	0	;tblptru may be non-zero
  1549  00166A                     	endif
  1550  00166A                     	if	0	;tblptru may be non-zero
  1551  00166A                     	endif
  1552  00166A  0008               	tblrd		*
  1553  00166C  CFF5 F03F          	movff	tablat,sprintf@c
  1554  001670  503F               	movf	sprintf@c,w,c
  1555  001672  B4D8               	btfsc	status,2,c
  1556  001674  D002               	goto	l1837
  1557  001676  D6DD               	goto	l1751
  1558  001678  D000               	goto	l1837
  1559  00167A                     l1837:
  1560                           
  1561                           ;doprnt.c: 1538: *sp = 0;
  1562  00167A  C02B  FFD9         	movff	sprintf@sp,fsr2l
  1563  00167E  C02C  FFDA         	movff	sprintf@sp+1,fsr2h
  1564  001682  0E00               	movlw	0
  1565  001684  6EDF               	movwf	indf2,c
  1566  001686  D000               	goto	l320
  1567  001688                     l320:
  1568  001688  0012               	return		;funcret
  1569  00168A                     __end_of_sprintf:
  1570                           	opt stack 0
  1571                           tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           prodh	equ	0xFF4
  1576                           prodl	equ	0xFF3
  1577                           postinc0	equ	0xFEE
  1578                           wreg	equ	0xFE8
  1579                           indf2	equ	0xFDF
  1580                           postinc2	equ	0xFDE
  1581                           postdec2	equ	0xFDD
  1582                           fsr2h	equ	0xFDA
  1583                           fsr2l	equ	0xFD9
  1584                           status	equ	0xFD8
  1585                           
  1586 ;; *************** function _isdigit *****************
  1587 ;; Defined at:
  1588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  c               1    wreg     unsigned char 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  c               1   32[COMRAM] unsigned char 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;		None               void
  1595 ;; Registers used:
  1596 ;;		wreg, status,2, status,0
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;Total ram usage:        3 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_sprintf
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text2
  1617  001CAC                     __ptext2:
  1618                           	opt stack 0
  1619  001CAC                     _isdigit:
  1620                           	opt stack 28
  1621                           
  1622                           ;incstack = 0
  1623                           ;isdigit@c stored from wreg
  1624  001CAC  6E21               	movwf	isdigit@c,c
  1625  001CAE  0E00               	movlw	0
  1626  001CB0  6E20               	movwf	_isdigit$784,c
  1627  001CB2  0E3A               	movlw	58
  1628  001CB4  6021               	cpfslt	isdigit@c,c
  1629  001CB6  D006               	goto	l1615
  1630  001CB8  0E2F               	movlw	47
  1631  001CBA  6421               	cpfsgt	isdigit@c,c
  1632  001CBC  D003               	goto	l1615
  1633  001CBE  0E01               	movlw	1
  1634  001CC0  6E20               	movwf	_isdigit$784,c
  1635  001CC2  D000               	goto	l1615
  1636  001CC4                     l1615:
  1637  001CC4  C020  F01F         	movff	_isdigit$784,??_isdigit
  1638  001CC8  301F               	rrcf	??_isdigit,w,c
  1639  001CCA  D000               	goto	l754
  1640  001CCC                     l754:
  1641  001CCC  0012               	return		;funcret
  1642  001CCE                     __end_of_isdigit:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           indf2	equ	0xFDF
  1653                           postinc2	equ	0xFDE
  1654                           postdec2	equ	0xFDD
  1655                           fsr2h	equ	0xFDA
  1656                           fsr2l	equ	0xFD9
  1657                           status	equ	0xFD8
  1658                           
  1659 ;; *************** function ___wmul *****************
  1660 ;; Defined at:
  1661 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;  multiplier      2   30[COMRAM] unsigned int 
  1664 ;;  multiplicand    2   32[COMRAM] unsigned int 
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  product         2   34[COMRAM] unsigned int 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  2   30[COMRAM] unsigned int 
  1669 ;; Registers used:
  1670 ;;		wreg, status,2, status,0, prodl, prodh
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1676 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;Total ram usage:        6 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_sprintf
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text3
  1691  001C84                     __ptext3:
  1692                           	opt stack 0
  1693  001C84                     ___wmul:
  1694                           	opt stack 28
  1695                           
  1696                           ;incstack = 0
  1697  001C84  501F               	movf	___wmul@multiplier,w,c
  1698  001C86  0221               	mulwf	___wmul@multiplicand,c
  1699  001C88  CFF3 F023          	movff	prodl,___wmul@product
  1700  001C8C  CFF4 F024          	movff	prodh,___wmul@product+1
  1701  001C90  501F               	movf	___wmul@multiplier,w,c
  1702  001C92  0222               	mulwf	___wmul@multiplicand+1,c
  1703  001C94  50F3               	movf	prodl,w,c
  1704  001C96  2624               	addwf	___wmul@product+1,f,c
  1705  001C98  5020               	movf	___wmul@multiplier+1,w,c
  1706  001C9A  0221               	mulwf	___wmul@multiplicand,c
  1707  001C9C  50F3               	movf	prodl,w,c
  1708  001C9E  2624               	addwf	___wmul@product+1,f,c
  1709  001CA0  C023  F01F         	movff	___wmul@product,?___wmul
  1710  001CA4  C024  F020         	movff	___wmul@product+1,?___wmul+1
  1711  001CA8  D000               	goto	l323
  1712  001CAA                     l323:
  1713  001CAA  0012               	return		;funcret
  1714  001CAC                     __end_of___wmul:
  1715                           	opt stack 0
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           prodh	equ	0xFF4
  1721                           prodl	equ	0xFF3
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           indf2	equ	0xFDF
  1725                           postinc2	equ	0xFDE
  1726                           postdec2	equ	0xFDD
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function ___lwmod *****************
  1732 ;; Defined at:
  1733 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  dividend        2   37[COMRAM] unsigned int 
  1736 ;;  divisor         2   39[COMRAM] unsigned int 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  counter         1   41[COMRAM] unsigned char 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  2   37[COMRAM] unsigned int 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2, status,0
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1748 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;Total ram usage:        5 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    1
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_sprintf
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text4
  1763  001AC4                     __ptext4:
  1764                           	opt stack 0
  1765  001AC4                     ___lwmod:
  1766                           	opt stack 28
  1767                           
  1768                           ;incstack = 0
  1769  001AC4  5028               	movf	___lwmod@divisor,w,c
  1770  001AC6  1029               	iorwf	___lwmod@divisor+1,w,c
  1771  001AC8  B4D8               	btfsc	status,2,c
  1772  001ACA  D01D               	goto	l856
  1773  001ACC  0E01               	movlw	1
  1774  001ACE  6E2A               	movwf	___lwmod@counter,c
  1775  001AD0  D005               	goto	l1653
  1776  001AD2                     l1651:
  1777  001AD2  90D8               	bcf	status,0,c
  1778  001AD4  3628               	rlcf	___lwmod@divisor,f,c
  1779  001AD6  3629               	rlcf	___lwmod@divisor+1,f,c
  1780  001AD8  2A2A               	incf	___lwmod@counter,f,c
  1781  001ADA  D000               	goto	l1653
  1782  001ADC                     l1653:
  1783  001ADC  BE29               	btfsc	___lwmod@divisor+1,7,c
  1784  001ADE  D002               	goto	l1655
  1785  001AE0  D7F8               	goto	l1651
  1786  001AE2  D000               	goto	l1655
  1787  001AE4                     l1655:
  1788  001AE4  5028               	movf	___lwmod@divisor,w,c
  1789  001AE6  5C26               	subwf	___lwmod@dividend,w,c
  1790  001AE8  5029               	movf	___lwmod@divisor+1,w,c
  1791  001AEA  5827               	subwfb	___lwmod@dividend+1,w,c
  1792  001AEC  A0D8               	btfss	status,0,c
  1793  001AEE  D005               	goto	l1659
  1794  001AF0  5028               	movf	___lwmod@divisor,w,c
  1795  001AF2  5E26               	subwf	___lwmod@dividend,f,c
  1796  001AF4  5029               	movf	___lwmod@divisor+1,w,c
  1797  001AF6  5A27               	subwfb	___lwmod@dividend+1,f,c
  1798  001AF8  D000               	goto	l1659
  1799  001AFA                     l1659:
  1800  001AFA  90D8               	bcf	status,0,c
  1801  001AFC  3229               	rrcf	___lwmod@divisor+1,f,c
  1802  001AFE  3228               	rrcf	___lwmod@divisor,f,c
  1803  001B00  2E2A               	decfsz	___lwmod@counter,f,c
  1804  001B02  D7F0               	goto	l1655
  1805  001B04  D000               	goto	l856
  1806  001B06                     l856:
  1807  001B06  C026  F026         	movff	___lwmod@dividend,?___lwmod
  1808  001B0A  C027  F027         	movff	___lwmod@dividend+1,?___lwmod+1
  1809  001B0E  0012               	return		;funcret
  1810  001B10                     __end_of___lwmod:
  1811                           	opt stack 0
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           postinc0	equ	0xFEE
  1819                           wreg	equ	0xFE8
  1820                           indf2	equ	0xFDF
  1821                           postinc2	equ	0xFDE
  1822                           postdec2	equ	0xFDD
  1823                           fsr2h	equ	0xFDA
  1824                           fsr2l	equ	0xFD9
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function ___lwdiv *****************
  1828 ;; Defined at:
  1829 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  dividend        2   30[COMRAM] unsigned int 
  1832 ;;  divisor         2   32[COMRAM] unsigned int 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  quotient        2   34[COMRAM] unsigned int 
  1835 ;;  counter         1   36[COMRAM] unsigned char 
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  2   30[COMRAM] unsigned int 
  1838 ;; Registers used:
  1839 ;;		wreg, status,2, status,0
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1845 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;Total ram usage:        7 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    1
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_sprintf
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text5
  1860  001A68                     __ptext5:
  1861                           	opt stack 0
  1862  001A68                     ___lwdiv:
  1863                           	opt stack 28
  1864                           
  1865                           ;incstack = 0
  1866  001A68  0E00               	movlw	0
  1867  001A6A  6E24               	movwf	___lwdiv@quotient+1,c
  1868  001A6C  0E00               	movlw	0
  1869  001A6E  6E23               	movwf	___lwdiv@quotient,c
  1870  001A70  5021               	movf	___lwdiv@divisor,w,c
  1871  001A72  1022               	iorwf	___lwdiv@divisor+1,w,c
  1872  001A74  B4D8               	btfsc	status,2,c
  1873  001A76  D021               	goto	l846
  1874  001A78  0E01               	movlw	1
  1875  001A7A  6E25               	movwf	___lwdiv@counter,c
  1876  001A7C  D005               	goto	l1633
  1877  001A7E                     l1631:
  1878  001A7E  90D8               	bcf	status,0,c
  1879  001A80  3621               	rlcf	___lwdiv@divisor,f,c
  1880  001A82  3622               	rlcf	___lwdiv@divisor+1,f,c
  1881  001A84  2A25               	incf	___lwdiv@counter,f,c
  1882  001A86  D000               	goto	l1633
  1883  001A88                     l1633:
  1884  001A88  BE22               	btfsc	___lwdiv@divisor+1,7,c
  1885  001A8A  D002               	goto	l1635
  1886  001A8C  D7F8               	goto	l1631
  1887  001A8E  D000               	goto	l1635
  1888  001A90                     l1635:
  1889  001A90  90D8               	bcf	status,0,c
  1890  001A92  3623               	rlcf	___lwdiv@quotient,f,c
  1891  001A94  3624               	rlcf	___lwdiv@quotient+1,f,c
  1892  001A96  5021               	movf	___lwdiv@divisor,w,c
  1893  001A98  5C1F               	subwf	___lwdiv@dividend,w,c
  1894  001A9A  5022               	movf	___lwdiv@divisor+1,w,c
  1895  001A9C  5820               	subwfb	___lwdiv@dividend+1,w,c
  1896  001A9E  A0D8               	btfss	status,0,c
  1897  001AA0  D006               	goto	l1643
  1898  001AA2  5021               	movf	___lwdiv@divisor,w,c
  1899  001AA4  5E1F               	subwf	___lwdiv@dividend,f,c
  1900  001AA6  5022               	movf	___lwdiv@divisor+1,w,c
  1901  001AA8  5A20               	subwfb	___lwdiv@dividend+1,f,c
  1902  001AAA  8023               	bsf	___lwdiv@quotient,0,c
  1903  001AAC  D000               	goto	l1643
  1904  001AAE                     l1643:
  1905  001AAE  90D8               	bcf	status,0,c
  1906  001AB0  3222               	rrcf	___lwdiv@divisor+1,f,c
  1907  001AB2  3221               	rrcf	___lwdiv@divisor,f,c
  1908  001AB4  2E25               	decfsz	___lwdiv@counter,f,c
  1909  001AB6  D7EC               	goto	l1635
  1910  001AB8  D000               	goto	l846
  1911  001ABA                     l846:
  1912  001ABA  C023  F01F         	movff	___lwdiv@quotient,?___lwdiv
  1913  001ABE  C024  F020         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1914  001AC2  0012               	return		;funcret
  1915  001AC4                     __end_of___lwdiv:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           prodh	equ	0xFF4
  1922                           prodl	equ	0xFF3
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           indf2	equ	0xFDF
  1926                           postinc2	equ	0xFDE
  1927                           postdec2	equ	0xFDD
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _pwm_start *****************
  1933 ;; Defined at:
  1934 ;;		line 19 in file "PWM.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;		None               void
  1941 ;; Registers used:
  1942 ;;		None
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;Total ram usage:        0 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    1
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text6
  1963  001DD4                     __ptext6:
  1964                           	opt stack 0
  1965  001DD4                     _pwm_start:
  1966                           	opt stack 29
  1967                           
  1968                           ;PWM.c: 20: TMR2ON = 1;
  1969                           
  1970                           ;incstack = 0
  1971  001DD4  84CA               	bsf	4042,2,c	;volatile
  1972  001DD6  0012               	return		;funcret
  1973  001DD8                     __end_of_pwm_start:
  1974                           	opt stack 0
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           prodh	equ	0xFF4
  1980                           prodl	equ	0xFF3
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           indf2	equ	0xFDF
  1984                           postinc2	equ	0xFDE
  1985                           postdec2	equ	0xFDD
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _pwm_set_duty *****************
  1991 ;; Defined at:
  1992 ;;		line 13 in file "PWM.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;  duty            2   30[COMRAM] int 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;		None
  1997 ;; Return value:  Size  Location     Type
  1998 ;;		None               void
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;Total ram usage:        4 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    1
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text7
  2021  001BFE                     __ptext7:
  2022                           	opt stack 0
  2023  001BFE                     _pwm_set_duty:
  2024                           	opt stack 29
  2025                           
  2026                           ;PWM.c: 15: CCP1CONbits.DC1B = duty & 0b00000011;
  2027                           
  2028                           ;incstack = 0
  2029  001BFE  C01F  F021         	movff	pwm_set_duty@duty,??_pwm_set_duty
  2030  001C02  0E03               	movlw	3
  2031  001C04  1621               	andwf	??_pwm_set_duty,f,c
  2032  001C06  3A21               	swapf	??_pwm_set_duty,f,c
  2033  001C08  50BD               	movf	4029,w,c	;volatile
  2034  001C0A  1821               	xorwf	??_pwm_set_duty,w,c
  2035  001C0C  0BCF               	andlw	-49
  2036  001C0E  1821               	xorwf	??_pwm_set_duty,w,c
  2037  001C10  6EBD               	movwf	4029,c	;volatile
  2038                           
  2039                           ;PWM.c: 16: CCPR1L = duty >> 2;
  2040  001C12  C01F  F021         	movff	pwm_set_duty@duty,??_pwm_set_duty
  2041  001C16  C020  F022         	movff	pwm_set_duty@duty+1,??_pwm_set_duty+1
  2042  001C1A  3422               	rlcf	??_pwm_set_duty+1,w,c
  2043  001C1C  3222               	rrcf	??_pwm_set_duty+1,f,c
  2044  001C1E  3221               	rrcf	??_pwm_set_duty,f,c
  2045  001C20  3422               	rlcf	??_pwm_set_duty+1,w,c
  2046  001C22  3222               	rrcf	??_pwm_set_duty+1,f,c
  2047  001C24  3221               	rrcf	??_pwm_set_duty,f,c
  2048  001C26  5021               	movf	??_pwm_set_duty,w,c
  2049  001C28  6EBE               	movwf	4030,c	;volatile
  2050  001C2A  0012               	return		;funcret
  2051  001C2C                     __end_of_pwm_set_duty:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           indf2	equ	0xFDF
  2062                           postinc2	equ	0xFDE
  2063                           postdec2	equ	0xFDD
  2064                           fsr2h	equ	0xFDA
  2065                           fsr2l	equ	0xFD9
  2066                           status	equ	0xFD8
  2067                           
  2068 ;; *************** function _pwm_init *****************
  2069 ;; Defined at:
  2070 ;;		line 4 in file "PWM.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;		None               void
  2077 ;; Registers used:
  2078 ;;		wreg, status,2
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    1
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text8
  2099  001D0E                     __ptext8:
  2100                           	opt stack 0
  2101  001D0E                     _pwm_init:
  2102                           	opt stack 29
  2103                           
  2104                           ;PWM.c: 5: TRISC2 = 0;
  2105                           
  2106                           ;incstack = 0
  2107  001D0E  9494               	bcf	3988,2,c	;volatile
  2108                           
  2109                           ;PWM.c: 6: TMR2 = 0;
  2110  001D10  0E00               	movlw	0
  2111  001D12  6ECC               	movwf	4044,c	;volatile
  2112                           
  2113                           ;PWM.c: 7: PR2 = 124;
  2114  001D14  0E7C               	movlw	124
  2115  001D16  6ECB               	movwf	4043,c	;volatile
  2116                           
  2117                           ;PWM.c: 8: T2CONbits.T2CKPS = 2;
  2118  001D18  50CA               	movf	4042,w,c	;volatile
  2119  001D1A  0BFC               	andlw	-4
  2120  001D1C  0902               	iorlw	2
  2121  001D1E  6ECA               	movwf	4042,c	;volatile
  2122                           
  2123                           ;PWM.c: 9: CCP1CONbits.CCP1M = 0xC;
  2124  001D20  50BD               	movf	4029,w,c	;volatile
  2125  001D22  0BF0               	andlw	-16
  2126  001D24  090C               	iorlw	12
  2127  001D26  6EBD               	movwf	4029,c	;volatile
  2128  001D28  0012               	return		;funcret
  2129  001D2A                     __end_of_pwm_init:
  2130                           	opt stack 0
  2131                           tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           prodh	equ	0xFF4
  2136                           prodl	equ	0xFF3
  2137                           postinc0	equ	0xFEE
  2138                           wreg	equ	0xFE8
  2139                           indf2	equ	0xFDF
  2140                           postinc2	equ	0xFDE
  2141                           postdec2	equ	0xFDD
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _RTC_WRITE_TIME *****************
  2147 ;; Defined at:
  2148 ;;		line 13 in file "rtc_liberary.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  second          1    wreg     unsigned char 
  2151 ;;  minute          1   41[COMRAM] unsigned char 
  2152 ;;  hour            1   42[COMRAM] unsigned char 
  2153 ;;  day             1   43[COMRAM] unsigned char 
  2154 ;;  date            1   44[COMRAM] unsigned char 
  2155 ;;  month           1   45[COMRAM] unsigned char 
  2156 ;;  year            1   46[COMRAM] unsigned char 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  second          1   47[COMRAM] unsigned char 
  2159 ;; Return value:  Size  Location     Type
  2160 ;;		None               void
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2168 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2172 ;;Total ram usage:        7 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    3
  2175 ;; This function calls:
  2176 ;;		_I2C_Start
  2177 ;;		_I2C_Stop
  2178 ;;		_I2C_Write
  2179 ;;		_decimel_to_bcd
  2180 ;; This function is called by:
  2181 ;;		_main
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           	psect	text9
  2186  0019EE                     __ptext9:
  2187                           	opt stack 0
  2188  0019EE                     _RTC_WRITE_TIME:
  2189                           	opt stack 27
  2190                           
  2191                           ;incstack = 0
  2192                           ;RTC_WRITE_TIME@second stored from wreg
  2193  0019EE  6E30               	movwf	RTC_WRITE_TIME@second,c
  2194                           
  2195                           ;rtc_liberary.c: 16: second = decimel_to_bcd(second);
  2196  0019F0  5030               	movf	RTC_WRITE_TIME@second,w,c
  2197  0019F2  ECE3  F00D         	call	_decimel_to_bcd
  2198  0019F6  6E30               	movwf	RTC_WRITE_TIME@second,c
  2199                           
  2200                           ;rtc_liberary.c: 17: minute = decimel_to_bcd(minute);
  2201  0019F8  502A               	movf	RTC_WRITE_TIME@minute,w,c
  2202  0019FA  ECE3  F00D         	call	_decimel_to_bcd
  2203  0019FE  6E2A               	movwf	RTC_WRITE_TIME@minute,c
  2204                           
  2205                           ;rtc_liberary.c: 18: hour = decimel_to_bcd(hour);
  2206  001A00  502B               	movf	RTC_WRITE_TIME@hour,w,c
  2207  001A02  ECE3  F00D         	call	_decimel_to_bcd
  2208  001A06  6E2B               	movwf	RTC_WRITE_TIME@hour,c
  2209                           
  2210                           ;rtc_liberary.c: 19: day = decimel_to_bcd(day);
  2211  001A08  502C               	movf	RTC_WRITE_TIME@day,w,c
  2212  001A0A  ECE3  F00D         	call	_decimel_to_bcd
  2213  001A0E  6E2C               	movwf	RTC_WRITE_TIME@day,c
  2214                           
  2215                           ;rtc_liberary.c: 20: date = decimel_to_bcd(date);
  2216  001A10  502D               	movf	RTC_WRITE_TIME@date,w,c
  2217  001A12  ECE3  F00D         	call	_decimel_to_bcd
  2218  001A16  6E2D               	movwf	RTC_WRITE_TIME@date,c
  2219                           
  2220                           ;rtc_liberary.c: 21: month = decimel_to_bcd(month);
  2221  001A18  502E               	movf	RTC_WRITE_TIME@month,w,c
  2222  001A1A  ECE3  F00D         	call	_decimel_to_bcd
  2223  001A1E  6E2E               	movwf	RTC_WRITE_TIME@month,c
  2224                           
  2225                           ;rtc_liberary.c: 22: year = decimel_to_bcd(year);
  2226  001A20  502F               	movf	RTC_WRITE_TIME@year,w,c
  2227  001A22  ECE3  F00D         	call	_decimel_to_bcd
  2228  001A26  6E2F               	movwf	RTC_WRITE_TIME@year,c
  2229                           
  2230                           ;rtc_liberary.c: 24: I2C_Start();
  2231  001A28  ECE2  F00E         	call	_I2C_Start	;wreg free
  2232                           
  2233                           ;rtc_liberary.c: 26: I2C_Write(0XD0);
  2234  001A2C  0ED0               	movlw	208
  2235  001A2E  ECCB  F00E         	call	_I2C_Write
  2236                           
  2237                           ;rtc_liberary.c: 27: I2C_Write(0X00);
  2238  001A32  0E00               	movlw	0
  2239  001A34  ECCB  F00E         	call	_I2C_Write
  2240                           
  2241                           ;rtc_liberary.c: 29: I2C_Write(second);
  2242  001A38  5030               	movf	RTC_WRITE_TIME@second,w,c
  2243  001A3A  ECCB  F00E         	call	_I2C_Write
  2244                           
  2245                           ;rtc_liberary.c: 30: I2C_Write(minute);
  2246  001A3E  502A               	movf	RTC_WRITE_TIME@minute,w,c
  2247  001A40  ECCB  F00E         	call	_I2C_Write
  2248                           
  2249                           ;rtc_liberary.c: 31: I2C_Write(hour);
  2250  001A44  502B               	movf	RTC_WRITE_TIME@hour,w,c
  2251  001A46  ECCB  F00E         	call	_I2C_Write
  2252                           
  2253                           ;rtc_liberary.c: 32: I2C_Write(day);
  2254  001A4A  502C               	movf	RTC_WRITE_TIME@day,w,c
  2255  001A4C  ECCB  F00E         	call	_I2C_Write
  2256                           
  2257                           ;rtc_liberary.c: 33: I2C_Write(date);
  2258  001A50  502D               	movf	RTC_WRITE_TIME@date,w,c
  2259  001A52  ECCB  F00E         	call	_I2C_Write
  2260                           
  2261                           ;rtc_liberary.c: 34: I2C_Write(month);
  2262  001A56  502E               	movf	RTC_WRITE_TIME@month,w,c
  2263  001A58  ECCB  F00E         	call	_I2C_Write
  2264                           
  2265                           ;rtc_liberary.c: 35: I2C_Write(year);
  2266  001A5C  502F               	movf	RTC_WRITE_TIME@year,w,c
  2267  001A5E  ECCB  F00E         	call	_I2C_Write
  2268                           
  2269                           ;rtc_liberary.c: 37: I2C_Stop();
  2270  001A62  ECDE  F00E         	call	_I2C_Stop	;wreg free
  2271  001A66  0012               	return		;funcret
  2272  001A68                     __end_of_RTC_WRITE_TIME:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           postinc0	equ	0xFEE
  2281                           wreg	equ	0xFE8
  2282                           indf2	equ	0xFDF
  2283                           postinc2	equ	0xFDE
  2284                           postdec2	equ	0xFDD
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _decimel_to_bcd *****************
  2290 ;; Defined at:
  2291 ;;		line 3 in file "rtc_liberary.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  num             1    wreg     unsigned char 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  num             1   40[COMRAM] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      unsigned char 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;Total ram usage:        3 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    2
  2312 ;; This function calls:
  2313 ;;		___awdiv
  2314 ;;		___awmod
  2315 ;; This function is called by:
  2316 ;;		_RTC_WRITE_TIME
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text10
  2321  001BC6                     __ptext10:
  2322                           	opt stack 0
  2323  001BC6                     _decimel_to_bcd:
  2324                           	opt stack 27
  2325                           
  2326                           ;incstack = 0
  2327                           ;decimel_to_bcd@num stored from wreg
  2328  001BC6  6E29               	movwf	decimel_to_bcd@num,c
  2329                           
  2330                           ;rtc_liberary.c: 5: return (((num / 10) << 4)+(num % 10));
  2331  001BC8  C029  F01F         	movff	decimel_to_bcd@num,___awmod@dividend
  2332  001BCC  6A20               	clrf	___awmod@dividend+1,c
  2333  001BCE  0E00               	movlw	0
  2334  001BD0  6E22               	movwf	___awmod@divisor+1,c
  2335  001BD2  0E0A               	movlw	10
  2336  001BD4  6E21               	movwf	___awmod@divisor,c
  2337  001BD6  EC75  F00C         	call	___awmod	;wreg free
  2338  001BDA  C01F  F027         	movff	?___awmod,??_decimel_to_bcd
  2339  001BDE  C020  F028         	movff	?___awmod+1,??_decimel_to_bcd+1
  2340  001BE2  C029  F01F         	movff	decimel_to_bcd@num,___awdiv@dividend
  2341  001BE6  6A20               	clrf	___awdiv@dividend+1,c
  2342  001BE8  0E00               	movlw	0
  2343  001BEA  6E22               	movwf	___awdiv@divisor+1,c
  2344  001BEC  0E0A               	movlw	10
  2345  001BEE  6E21               	movwf	___awdiv@divisor,c
  2346  001BF0  ECE8  F00B         	call	___awdiv	;wreg free
  2347  001BF4  381F               	swapf	?___awdiv,w,c
  2348  001BF6  0BF0               	andlw	240
  2349  001BF8  2427               	addwf	??_decimel_to_bcd,w,c
  2350  001BFA  D000               	goto	l272
  2351  001BFC                     l272:
  2352  001BFC  0012               	return		;funcret
  2353  001BFE                     __end_of_decimel_to_bcd:
  2354                           	opt stack 0
  2355                           tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           prodh	equ	0xFF4
  2360                           prodl	equ	0xFF3
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           indf2	equ	0xFDF
  2364                           postinc2	equ	0xFDE
  2365                           postdec2	equ	0xFDD
  2366                           fsr2h	equ	0xFDA
  2367                           fsr2l	equ	0xFD9
  2368                           status	equ	0xFD8
  2369                           
  2370 ;; *************** function ___awmod *****************
  2371 ;; Defined at:
  2372 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  dividend        2   30[COMRAM] int 
  2375 ;;  divisor         2   32[COMRAM] int 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  sign            1   35[COMRAM] unsigned char 
  2378 ;;  counter         1   34[COMRAM] unsigned char 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  2   30[COMRAM] int 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2388 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;Total ram usage:        6 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    1
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		_decimel_to_bcd
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text11
  2403  0018EA                     __ptext11:
  2404                           	opt stack 0
  2405  0018EA                     ___awmod:
  2406                           	opt stack 27
  2407                           
  2408                           ;incstack = 0
  2409  0018EA  0E00               	movlw	0
  2410  0018EC  6E24               	movwf	___awmod@sign,c
  2411  0018EE  AE20               	btfss	___awmod@dividend+1,7,c
  2412  0018F0  D007               	goto	l1557
  2413  0018F2  6C1F               	negf	___awmod@dividend,c
  2414  0018F4  1E20               	comf	___awmod@dividend+1,f,c
  2415  0018F6  B0D8               	btfsc	status,0,c
  2416  0018F8  2A20               	incf	___awmod@dividend+1,f,c
  2417  0018FA  0E01               	movlw	1
  2418  0018FC  6E24               	movwf	___awmod@sign,c
  2419  0018FE  D000               	goto	l1557
  2420  001900                     l1557:
  2421  001900  AE22               	btfss	___awmod@divisor+1,7,c
  2422  001902  D005               	goto	l1561
  2423  001904  6C21               	negf	___awmod@divisor,c
  2424  001906  1E22               	comf	___awmod@divisor+1,f,c
  2425  001908  B0D8               	btfsc	status,0,c
  2426  00190A  2A22               	incf	___awmod@divisor+1,f,c
  2427  00190C  D000               	goto	l1561
  2428  00190E                     l1561:
  2429  00190E  5021               	movf	___awmod@divisor,w,c
  2430  001910  1022               	iorwf	___awmod@divisor+1,w,c
  2431  001912  B4D8               	btfsc	status,2,c
  2432  001914  D01D               	goto	l1577
  2433  001916  0E01               	movlw	1
  2434  001918  6E23               	movwf	___awmod@counter,c
  2435  00191A  D005               	goto	l1567
  2436  00191C                     l1565:
  2437  00191C  90D8               	bcf	status,0,c
  2438  00191E  3621               	rlcf	___awmod@divisor,f,c
  2439  001920  3622               	rlcf	___awmod@divisor+1,f,c
  2440  001922  2A23               	incf	___awmod@counter,f,c
  2441  001924  D000               	goto	l1567
  2442  001926                     l1567:
  2443  001926  BE22               	btfsc	___awmod@divisor+1,7,c
  2444  001928  D002               	goto	l1569
  2445  00192A  D7F8               	goto	l1565
  2446  00192C  D000               	goto	l1569
  2447  00192E                     l1569:
  2448  00192E  5021               	movf	___awmod@divisor,w,c
  2449  001930  5C1F               	subwf	___awmod@dividend,w,c
  2450  001932  5022               	movf	___awmod@divisor+1,w,c
  2451  001934  5820               	subwfb	___awmod@dividend+1,w,c
  2452  001936  A0D8               	btfss	status,0,c
  2453  001938  D005               	goto	l1573
  2454  00193A  5021               	movf	___awmod@divisor,w,c
  2455  00193C  5E1F               	subwf	___awmod@dividend,f,c
  2456  00193E  5022               	movf	___awmod@divisor+1,w,c
  2457  001940  5A20               	subwfb	___awmod@dividend+1,f,c
  2458  001942  D000               	goto	l1573
  2459  001944                     l1573:
  2460  001944  90D8               	bcf	status,0,c
  2461  001946  3222               	rrcf	___awmod@divisor+1,f,c
  2462  001948  3221               	rrcf	___awmod@divisor,f,c
  2463  00194A  2E23               	decfsz	___awmod@counter,f,c
  2464  00194C  D7F0               	goto	l1569
  2465  00194E  D000               	goto	l1577
  2466  001950                     l1577:
  2467  001950  5024               	movf	___awmod@sign,w,c
  2468  001952  B4D8               	btfsc	status,2,c
  2469  001954  D005               	goto	l1581
  2470  001956  6C1F               	negf	___awmod@dividend,c
  2471  001958  1E20               	comf	___awmod@dividend+1,f,c
  2472  00195A  B0D8               	btfsc	status,0,c
  2473  00195C  2A20               	incf	___awmod@dividend+1,f,c
  2474  00195E  D000               	goto	l1581
  2475  001960                     l1581:
  2476  001960  C01F  F01F         	movff	___awmod@dividend,?___awmod
  2477  001964  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  2478  001968  D000               	goto	l529
  2479  00196A                     l529:
  2480  00196A  0012               	return		;funcret
  2481  00196C                     __end_of___awmod:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           postinc0	equ	0xFEE
  2490                           wreg	equ	0xFE8
  2491                           indf2	equ	0xFDF
  2492                           postinc2	equ	0xFDE
  2493                           postdec2	equ	0xFDD
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function ___awdiv *****************
  2499 ;; Defined at:
  2500 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  dividend        2   30[COMRAM] int 
  2503 ;;  divisor         2   32[COMRAM] int 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  quotient        2   36[COMRAM] int 
  2506 ;;  sign            1   35[COMRAM] unsigned char 
  2507 ;;  counter         1   34[COMRAM] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  2   30[COMRAM] int 
  2510 ;; Registers used:
  2511 ;;		wreg, status,2, status,0
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2517 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;Total ram usage:        8 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    1
  2524 ;; This function calls:
  2525 ;;		Nothing
  2526 ;; This function is called by:
  2527 ;;		_decimel_to_bcd
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text12
  2532  0017D0                     __ptext12:
  2533                           	opt stack 0
  2534  0017D0                     ___awdiv:
  2535                           	opt stack 27
  2536                           
  2537                           ;incstack = 0
  2538  0017D0  0E00               	movlw	0
  2539  0017D2  6E24               	movwf	___awdiv@sign,c
  2540  0017D4  AE22               	btfss	___awdiv@divisor+1,7,c
  2541  0017D6  D007               	goto	l1513
  2542  0017D8  6C21               	negf	___awdiv@divisor,c
  2543  0017DA  1E22               	comf	___awdiv@divisor+1,f,c
  2544  0017DC  B0D8               	btfsc	status,0,c
  2545  0017DE  2A22               	incf	___awdiv@divisor+1,f,c
  2546  0017E0  0E01               	movlw	1
  2547  0017E2  6E24               	movwf	___awdiv@sign,c
  2548  0017E4  D000               	goto	l1513
  2549  0017E6                     l1513:
  2550  0017E6  AE20               	btfss	___awdiv@dividend+1,7,c
  2551  0017E8  D007               	goto	l1519
  2552  0017EA  6C1F               	negf	___awdiv@dividend,c
  2553  0017EC  1E20               	comf	___awdiv@dividend+1,f,c
  2554  0017EE  B0D8               	btfsc	status,0,c
  2555  0017F0  2A20               	incf	___awdiv@dividend+1,f,c
  2556  0017F2  0E01               	movlw	1
  2557  0017F4  1A24               	xorwf	___awdiv@sign,f,c
  2558  0017F6  D000               	goto	l1519
  2559  0017F8                     l1519:
  2560  0017F8  0E00               	movlw	0
  2561  0017FA  6E26               	movwf	___awdiv@quotient+1,c
  2562  0017FC  0E00               	movlw	0
  2563  0017FE  6E25               	movwf	___awdiv@quotient,c
  2564  001800  5021               	movf	___awdiv@divisor,w,c
  2565  001802  1022               	iorwf	___awdiv@divisor+1,w,c
  2566  001804  B4D8               	btfsc	status,2,c
  2567  001806  D021               	goto	l1541
  2568  001808  0E01               	movlw	1
  2569  00180A  6E23               	movwf	___awdiv@counter,c
  2570  00180C  D005               	goto	l1527
  2571  00180E                     l1525:
  2572  00180E  90D8               	bcf	status,0,c
  2573  001810  3621               	rlcf	___awdiv@divisor,f,c
  2574  001812  3622               	rlcf	___awdiv@divisor+1,f,c
  2575  001814  2A23               	incf	___awdiv@counter,f,c
  2576  001816  D000               	goto	l1527
  2577  001818                     l1527:
  2578  001818  BE22               	btfsc	___awdiv@divisor+1,7,c
  2579  00181A  D002               	goto	l1529
  2580  00181C  D7F8               	goto	l1525
  2581  00181E  D000               	goto	l1529
  2582  001820                     l1529:
  2583  001820  90D8               	bcf	status,0,c
  2584  001822  3625               	rlcf	___awdiv@quotient,f,c
  2585  001824  3626               	rlcf	___awdiv@quotient+1,f,c
  2586  001826  5021               	movf	___awdiv@divisor,w,c
  2587  001828  5C1F               	subwf	___awdiv@dividend,w,c
  2588  00182A  5022               	movf	___awdiv@divisor+1,w,c
  2589  00182C  5820               	subwfb	___awdiv@dividend+1,w,c
  2590  00182E  A0D8               	btfss	status,0,c
  2591  001830  D006               	goto	l1537
  2592  001832  5021               	movf	___awdiv@divisor,w,c
  2593  001834  5E1F               	subwf	___awdiv@dividend,f,c
  2594  001836  5022               	movf	___awdiv@divisor+1,w,c
  2595  001838  5A20               	subwfb	___awdiv@dividend+1,f,c
  2596  00183A  8025               	bsf	___awdiv@quotient,0,c
  2597  00183C  D000               	goto	l1537
  2598  00183E                     l1537:
  2599  00183E  90D8               	bcf	status,0,c
  2600  001840  3222               	rrcf	___awdiv@divisor+1,f,c
  2601  001842  3221               	rrcf	___awdiv@divisor,f,c
  2602  001844  2E23               	decfsz	___awdiv@counter,f,c
  2603  001846  D7EC               	goto	l1529
  2604  001848  D000               	goto	l1541
  2605  00184A                     l1541:
  2606  00184A  5024               	movf	___awdiv@sign,w,c
  2607  00184C  B4D8               	btfsc	status,2,c
  2608  00184E  D005               	goto	l1545
  2609  001850  6C25               	negf	___awdiv@quotient,c
  2610  001852  1E26               	comf	___awdiv@quotient+1,f,c
  2611  001854  B0D8               	btfsc	status,0,c
  2612  001856  2A26               	incf	___awdiv@quotient+1,f,c
  2613  001858  D000               	goto	l1545
  2614  00185A                     l1545:
  2615  00185A  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  2616  00185E  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  2617  001862  D000               	goto	l516
  2618  001864                     l516:
  2619  001864  0012               	return		;funcret
  2620  001866                     __end_of___awdiv:
  2621                           	opt stack 0
  2622                           tblptru	equ	0xFF8
  2623                           tblptrh	equ	0xFF7
  2624                           tblptrl	equ	0xFF6
  2625                           tablat	equ	0xFF5
  2626                           prodh	equ	0xFF4
  2627                           prodl	equ	0xFF3
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           indf2	equ	0xFDF
  2631                           postinc2	equ	0xFDE
  2632                           postdec2	equ	0xFDD
  2633                           fsr2h	equ	0xFDA
  2634                           fsr2l	equ	0xFD9
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _RTC_READ_TIME *****************
  2638 ;; Defined at:
  2639 ;;		line 41 in file "rtc_liberary.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  second          2   32[COMRAM] PTR unsigned char 
  2642 ;;		 -> second(1), 
  2643 ;;  minute          2   34[COMRAM] PTR unsigned char 
  2644 ;;		 -> minute(1), 
  2645 ;;  hour            2   36[COMRAM] PTR unsigned char 
  2646 ;;		 -> hour(1), 
  2647 ;;  day             2   38[COMRAM] PTR unsigned char 
  2648 ;;		 -> day(1), 
  2649 ;;  date            2   40[COMRAM] PTR unsigned char 
  2650 ;;		 -> date(1), 
  2651 ;;  month           2   42[COMRAM] PTR unsigned char 
  2652 ;;		 -> month(1), 
  2653 ;;  year            2   44[COMRAM] PTR unsigned char 
  2654 ;;		 -> year(1), 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;		None
  2657 ;; Return value:  Size  Location     Type
  2658 ;;		None               void
  2659 ;; Registers used:
  2660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2666 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;Total ram usage:       14 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    3
  2673 ;; This function calls:
  2674 ;;		_I2C_ACK
  2675 ;;		_I2C_NACK
  2676 ;;		_I2C_Read
  2677 ;;		_I2C_Restart
  2678 ;;		_I2C_Start
  2679 ;;		_I2C_Stop
  2680 ;;		_I2C_Write
  2681 ;;		_bcd_to_decimel
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text13
  2688  00168A                     __ptext13:
  2689                           	opt stack 0
  2690  00168A                     _RTC_READ_TIME:
  2691                           	opt stack 27
  2692                           
  2693                           ;rtc_liberary.c: 45: I2C_Start();
  2694                           
  2695                           ;incstack = 0
  2696  00168A  ECE2  F00E         	call	_I2C_Start	;wreg free
  2697                           
  2698                           ;rtc_liberary.c: 47: I2C_Write(0XD0);
  2699  00168E  0ED0               	movlw	208
  2700  001690  ECCB  F00E         	call	_I2C_Write
  2701                           
  2702                           ;rtc_liberary.c: 48: I2C_Write(0X01);
  2703  001694  0E01               	movlw	1
  2704  001696  ECCB  F00E         	call	_I2C_Write
  2705                           
  2706                           ;rtc_liberary.c: 50: I2C_Restart();
  2707  00169A  ECE6  F00E         	call	_I2C_Restart	;wreg free
  2708                           
  2709                           ;rtc_liberary.c: 52: I2C_Write(0XD1);
  2710  00169E  0ED1               	movlw	209
  2711  0016A0  ECCB  F00E         	call	_I2C_Write
  2712                           
  2713                           ;rtc_liberary.c: 54: *second = I2C_Read();
  2714  0016A4  ECB7  F00E         	call	_I2C_Read	;wreg free
  2715  0016A8  C021  FFD9         	movff	RTC_READ_TIME@second,fsr2l
  2716  0016AC  C022  FFDA         	movff	RTC_READ_TIME@second+1,fsr2h
  2717  0016B0  6EDF               	movwf	indf2,c
  2718                           
  2719                           ;rtc_liberary.c: 55: I2C_ACK();
  2720  0016B2  ECD9  F00E         	call	_I2C_ACK	;wreg free
  2721                           
  2722                           ;rtc_liberary.c: 56: *minute = I2C_Read();
  2723  0016B6  ECB7  F00E         	call	_I2C_Read	;wreg free
  2724  0016BA  C023  FFD9         	movff	RTC_READ_TIME@minute,fsr2l
  2725  0016BE  C024  FFDA         	movff	RTC_READ_TIME@minute+1,fsr2h
  2726  0016C2  6EDF               	movwf	indf2,c
  2727                           
  2728                           ;rtc_liberary.c: 57: I2C_ACK();
  2729  0016C4  ECD9  F00E         	call	_I2C_ACK	;wreg free
  2730                           
  2731                           ;rtc_liberary.c: 58: *hour = I2C_Read();
  2732  0016C8  ECB7  F00E         	call	_I2C_Read	;wreg free
  2733  0016CC  C025  FFD9         	movff	RTC_READ_TIME@hour,fsr2l
  2734  0016D0  C026  FFDA         	movff	RTC_READ_TIME@hour+1,fsr2h
  2735  0016D4  6EDF               	movwf	indf2,c
  2736                           
  2737                           ;rtc_liberary.c: 59: I2C_ACK();
  2738  0016D6  ECD9  F00E         	call	_I2C_ACK	;wreg free
  2739                           
  2740                           ;rtc_liberary.c: 60: *day = I2C_Read();
  2741  0016DA  ECB7  F00E         	call	_I2C_Read	;wreg free
  2742  0016DE  C027  FFD9         	movff	RTC_READ_TIME@day,fsr2l
  2743  0016E2  C028  FFDA         	movff	RTC_READ_TIME@day+1,fsr2h
  2744  0016E6  6EDF               	movwf	indf2,c
  2745                           
  2746                           ;rtc_liberary.c: 61: I2C_ACK();
  2747  0016E8  ECD9  F00E         	call	_I2C_ACK	;wreg free
  2748                           
  2749                           ;rtc_liberary.c: 62: *date = I2C_Read();
  2750  0016EC  ECB7  F00E         	call	_I2C_Read	;wreg free
  2751  0016F0  C029  FFD9         	movff	RTC_READ_TIME@date,fsr2l
  2752  0016F4  C02A  FFDA         	movff	RTC_READ_TIME@date+1,fsr2h
  2753  0016F8  6EDF               	movwf	indf2,c
  2754                           
  2755                           ;rtc_liberary.c: 63: I2C_ACK();
  2756  0016FA  ECD9  F00E         	call	_I2C_ACK	;wreg free
  2757                           
  2758                           ;rtc_liberary.c: 64: *month = I2C_Read();
  2759  0016FE  ECB7  F00E         	call	_I2C_Read	;wreg free
  2760  001702  C02B  FFD9         	movff	RTC_READ_TIME@month,fsr2l
  2761  001706  C02C  FFDA         	movff	RTC_READ_TIME@month+1,fsr2h
  2762  00170A  6EDF               	movwf	indf2,c
  2763                           
  2764                           ;rtc_liberary.c: 65: I2C_ACK();
  2765  00170C  ECD9  F00E         	call	_I2C_ACK	;wreg free
  2766                           
  2767                           ;rtc_liberary.c: 66: *year = I2C_Read();
  2768  001710  ECB7  F00E         	call	_I2C_Read	;wreg free
  2769  001714  C02D  FFD9         	movff	RTC_READ_TIME@year,fsr2l
  2770  001718  C02E  FFDA         	movff	RTC_READ_TIME@year+1,fsr2h
  2771  00171C  6EDF               	movwf	indf2,c
  2772                           
  2773                           ;rtc_liberary.c: 67: I2C_NACK();
  2774  00171E  ECD4  F00E         	call	_I2C_NACK	;wreg free
  2775                           
  2776                           ;rtc_liberary.c: 69: *second = bcd_to_decimel(*second);
  2777  001722  C021  FFD9         	movff	RTC_READ_TIME@second,fsr2l
  2778  001726  C022  FFDA         	movff	RTC_READ_TIME@second+1,fsr2h
  2779  00172A  50DF               	movf	indf2,w,c
  2780  00172C  EC95  F00E         	call	_bcd_to_decimel
  2781  001730  C021  FFD9         	movff	RTC_READ_TIME@second,fsr2l
  2782  001734  C022  FFDA         	movff	RTC_READ_TIME@second+1,fsr2h
  2783  001738  6EDF               	movwf	indf2,c
  2784                           
  2785                           ;rtc_liberary.c: 70: *minute = bcd_to_decimel(*minute);
  2786  00173A  C023  FFD9         	movff	RTC_READ_TIME@minute,fsr2l
  2787  00173E  C024  FFDA         	movff	RTC_READ_TIME@minute+1,fsr2h
  2788  001742  50DF               	movf	indf2,w,c
  2789  001744  EC95  F00E         	call	_bcd_to_decimel
  2790  001748  C023  FFD9         	movff	RTC_READ_TIME@minute,fsr2l
  2791  00174C  C024  FFDA         	movff	RTC_READ_TIME@minute+1,fsr2h
  2792  001750  6EDF               	movwf	indf2,c
  2793                           
  2794                           ;rtc_liberary.c: 71: *hour = bcd_to_decimel(*hour);
  2795  001752  C025  FFD9         	movff	RTC_READ_TIME@hour,fsr2l
  2796  001756  C026  FFDA         	movff	RTC_READ_TIME@hour+1,fsr2h
  2797  00175A  50DF               	movf	indf2,w,c
  2798  00175C  EC95  F00E         	call	_bcd_to_decimel
  2799  001760  C025  FFD9         	movff	RTC_READ_TIME@hour,fsr2l
  2800  001764  C026  FFDA         	movff	RTC_READ_TIME@hour+1,fsr2h
  2801  001768  6EDF               	movwf	indf2,c
  2802                           
  2803                           ;rtc_liberary.c: 72: *day = bcd_to_decimel(*day);
  2804  00176A  C027  FFD9         	movff	RTC_READ_TIME@day,fsr2l
  2805  00176E  C028  FFDA         	movff	RTC_READ_TIME@day+1,fsr2h
  2806  001772  50DF               	movf	indf2,w,c
  2807  001774  EC95  F00E         	call	_bcd_to_decimel
  2808  001778  C027  FFD9         	movff	RTC_READ_TIME@day,fsr2l
  2809  00177C  C028  FFDA         	movff	RTC_READ_TIME@day+1,fsr2h
  2810  001780  6EDF               	movwf	indf2,c
  2811                           
  2812                           ;rtc_liberary.c: 73: *date = bcd_to_decimel(*date);
  2813  001782  C029  FFD9         	movff	RTC_READ_TIME@date,fsr2l
  2814  001786  C02A  FFDA         	movff	RTC_READ_TIME@date+1,fsr2h
  2815  00178A  50DF               	movf	indf2,w,c
  2816  00178C  EC95  F00E         	call	_bcd_to_decimel
  2817  001790  C029  FFD9         	movff	RTC_READ_TIME@date,fsr2l
  2818  001794  C02A  FFDA         	movff	RTC_READ_TIME@date+1,fsr2h
  2819  001798  6EDF               	movwf	indf2,c
  2820                           
  2821                           ;rtc_liberary.c: 74: *month = bcd_to_decimel(*month);
  2822  00179A  C02B  FFD9         	movff	RTC_READ_TIME@month,fsr2l
  2823  00179E  C02C  FFDA         	movff	RTC_READ_TIME@month+1,fsr2h
  2824  0017A2  50DF               	movf	indf2,w,c
  2825  0017A4  EC95  F00E         	call	_bcd_to_decimel
  2826  0017A8  C02B  FFD9         	movff	RTC_READ_TIME@month,fsr2l
  2827  0017AC  C02C  FFDA         	movff	RTC_READ_TIME@month+1,fsr2h
  2828  0017B0  6EDF               	movwf	indf2,c
  2829                           
  2830                           ;rtc_liberary.c: 75: *year = bcd_to_decimel(*year);
  2831  0017B2  C02D  FFD9         	movff	RTC_READ_TIME@year,fsr2l
  2832  0017B6  C02E  FFDA         	movff	RTC_READ_TIME@year+1,fsr2h
  2833  0017BA  50DF               	movf	indf2,w,c
  2834  0017BC  EC95  F00E         	call	_bcd_to_decimel
  2835  0017C0  C02D  FFD9         	movff	RTC_READ_TIME@year,fsr2l
  2836  0017C4  C02E  FFDA         	movff	RTC_READ_TIME@year+1,fsr2h
  2837  0017C8  6EDF               	movwf	indf2,c
  2838                           
  2839                           ;rtc_liberary.c: 77: I2C_Stop();
  2840  0017CA  ECDE  F00E         	call	_I2C_Stop	;wreg free
  2841  0017CE  0012               	return		;funcret
  2842  0017D0                     __end_of_RTC_READ_TIME:
  2843                           	opt stack 0
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           postinc0	equ	0xFEE
  2851                           wreg	equ	0xFE8
  2852                           indf2	equ	0xFDF
  2853                           postinc2	equ	0xFDE
  2854                           postdec2	equ	0xFDD
  2855                           fsr2h	equ	0xFDA
  2856                           fsr2l	equ	0xFD9
  2857                           status	equ	0xFD8
  2858                           
  2859 ;; *************** function _bcd_to_decimel *****************
  2860 ;; Defined at:
  2861 ;;		line 8 in file "rtc_liberary.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;  num             1    wreg     unsigned char 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  num             1   31[COMRAM] unsigned char 
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      unsigned char 
  2868 ;; Registers used:
  2869 ;;		wreg, status,2, status,0, prodl, prodh
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;Total ram usage:        2 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    1
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_RTC_READ_TIME
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text14
  2890  001D2A                     __ptext14:
  2891                           	opt stack 0
  2892  001D2A                     _bcd_to_decimel:
  2893                           	opt stack 28
  2894                           
  2895                           ;incstack = 0
  2896                           ;bcd_to_decimel@num stored from wreg
  2897  001D2A  6E20               	movwf	bcd_to_decimel@num,c
  2898                           
  2899                           ;rtc_liberary.c: 10: return (((num >> 4)*10)+(num & 0x0f));
  2900  001D2C  C020  F01F         	movff	bcd_to_decimel@num,??_bcd_to_decimel
  2901  001D30  0E0F               	movlw	15
  2902  001D32  161F               	andwf	??_bcd_to_decimel,f,c
  2903  001D34  3820               	swapf	bcd_to_decimel@num,w,c
  2904  001D36  0B0F               	andlw	15
  2905  001D38  0D0A               	mullw	10
  2906  001D3A  50F3               	movf	prodl,w,c
  2907  001D3C  241F               	addwf	??_bcd_to_decimel,w,c
  2908  001D3E  D000               	goto	l275
  2909  001D40                     l275:
  2910  001D40  0012               	return		;funcret
  2911  001D42                     __end_of_bcd_to_decimel:
  2912                           	opt stack 0
  2913                           tblptru	equ	0xFF8
  2914                           tblptrh	equ	0xFF7
  2915                           tblptrl	equ	0xFF6
  2916                           tablat	equ	0xFF5
  2917                           prodh	equ	0xFF4
  2918                           prodl	equ	0xFF3
  2919                           postinc0	equ	0xFEE
  2920                           wreg	equ	0xFE8
  2921                           indf2	equ	0xFDF
  2922                           postinc2	equ	0xFDE
  2923                           postdec2	equ	0xFDD
  2924                           fsr2h	equ	0xFDA
  2925                           fsr2l	equ	0xFD9
  2926                           status	equ	0xFD8
  2927                           
  2928 ;; *************** function _I2C_Write *****************
  2929 ;; Defined at:
  2930 ;;		line 64 in file "i2c.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  Data            1    wreg     unsigned char 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  Data            1   31[COMRAM] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      unsigned char 
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, status,0, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;Total ram usage:        1 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    2
  2951 ;; This function calls:
  2952 ;;		_I2C_Wait
  2953 ;; This function is called by:
  2954 ;;		_RTC_WRITE_TIME
  2955 ;;		_RTC_READ_TIME
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text15
  2960  001D96                     __ptext15:
  2961                           	opt stack 0
  2962  001D96                     _I2C_Write:
  2963                           	opt stack 27
  2964                           
  2965                           ;incstack = 0
  2966                           ;I2C_Write@Data stored from wreg
  2967  001D96  6E20               	movwf	I2C_Write@Data,c
  2968                           
  2969                           ;i2c.c: 66: I2C_Wait();
  2970  001D98  ECC1  F00E         	call	_I2C_Wait	;wreg free
  2971                           
  2972                           ;i2c.c: 67: SSPBUF = Data;
  2973  001D9C  C020  FFC9         	movff	I2C_Write@Data,4041	;volatile
  2974                           
  2975                           ;i2c.c: 68: I2C_Wait();
  2976  001DA0  ECC1  F00E         	call	_I2C_Wait	;wreg free
  2977                           
  2978                           ;i2c.c: 69: return ACKSTAT;
  2979                           ;	Return value of _I2C_Write is never used
  2980  001DA4  D000               	goto	l233
  2981  001DA6                     l233:
  2982  001DA6  0012               	return		;funcret
  2983  001DA8                     __end_of_I2C_Write:
  2984                           	opt stack 0
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           prodh	equ	0xFF4
  2990                           prodl	equ	0xFF3
  2991                           postinc0	equ	0xFEE
  2992                           wreg	equ	0xFE8
  2993                           indf2	equ	0xFDF
  2994                           postinc2	equ	0xFDE
  2995                           postdec2	equ	0xFDD
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _I2C_Stop *****************
  3001 ;; Defined at:
  3002 ;;		line 38 in file "i2c.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;		None               void
  3009 ;; Registers used:
  3010 ;;		wreg, status,2, status,0, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;Total ram usage:        0 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    2
  3023 ;; This function calls:
  3024 ;;		_I2C_Wait
  3025 ;; This function is called by:
  3026 ;;		_RTC_WRITE_TIME
  3027 ;;		_RTC_READ_TIME
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text16
  3032  001DBC                     __ptext16:
  3033                           	opt stack 0
  3034  001DBC                     _I2C_Stop:
  3035                           	opt stack 27
  3036                           
  3037                           ;i2c.c: 40: I2C_Wait();
  3038                           
  3039                           ;incstack = 0
  3040  001DBC  ECC1  F00E         	call	_I2C_Wait	;wreg free
  3041                           
  3042                           ;i2c.c: 41: PEN = 1;
  3043  001DC0  84C5               	bsf	4037,2,c	;volatile
  3044  001DC2  0012               	return		;funcret
  3045  001DC4                     __end_of_I2C_Stop:
  3046                           	opt stack 0
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           prodh	equ	0xFF4
  3052                           prodl	equ	0xFF3
  3053                           postinc0	equ	0xFEE
  3054                           wreg	equ	0xFE8
  3055                           indf2	equ	0xFDF
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _I2C_Start *****************
  3063 ;; Defined at:
  3064 ;;		line 32 in file "i2c.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;		None               void
  3071 ;; Registers used:
  3072 ;;		wreg, status,2, status,0, cstack
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;Total ram usage:        0 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    2
  3085 ;; This function calls:
  3086 ;;		_I2C_Wait
  3087 ;; This function is called by:
  3088 ;;		_RTC_WRITE_TIME
  3089 ;;		_RTC_READ_TIME
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text17
  3094  001DC4                     __ptext17:
  3095                           	opt stack 0
  3096  001DC4                     _I2C_Start:
  3097                           	opt stack 27
  3098                           
  3099                           ;i2c.c: 34: I2C_Wait();
  3100                           
  3101                           ;incstack = 0
  3102  001DC4  ECC1  F00E         	call	_I2C_Wait	;wreg free
  3103                           
  3104                           ;i2c.c: 35: SEN = 1;
  3105  001DC8  80C5               	bsf	4037,0,c	;volatile
  3106  001DCA  0012               	return		;funcret
  3107  001DCC                     __end_of_I2C_Start:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           postinc0	equ	0xFEE
  3116                           wreg	equ	0xFE8
  3117                           indf2	equ	0xFDF
  3118                           postinc2	equ	0xFDE
  3119                           postdec2	equ	0xFDD
  3120                           fsr2h	equ	0xFDA
  3121                           fsr2l	equ	0xFD9
  3122                           status	equ	0xFD8
  3123                           
  3124 ;; *************** function _I2C_Restart *****************
  3125 ;; Defined at:
  3126 ;;		line 44 in file "i2c.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;		None
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;		None
  3131 ;; Return value:  Size  Location     Type
  3132 ;;		None               void
  3133 ;; Registers used:
  3134 ;;		wreg, status,2, status,0, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;Total ram usage:        0 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    2
  3147 ;; This function calls:
  3148 ;;		_I2C_Wait
  3149 ;; This function is called by:
  3150 ;;		_RTC_READ_TIME
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text18
  3155  001DCC                     __ptext18:
  3156                           	opt stack 0
  3157  001DCC                     _I2C_Restart:
  3158                           	opt stack 27
  3159                           
  3160                           ;i2c.c: 46: I2C_Wait();
  3161                           
  3162                           ;incstack = 0
  3163  001DCC  ECC1  F00E         	call	_I2C_Wait	;wreg free
  3164                           
  3165                           ;i2c.c: 47: RSEN = 1;
  3166  001DD0  82C5               	bsf	4037,1,c	;volatile
  3167  001DD2  0012               	return		;funcret
  3168  001DD4                     __end_of_I2C_Restart:
  3169                           	opt stack 0
  3170                           tblptru	equ	0xFF8
  3171                           tblptrh	equ	0xFF7
  3172                           tblptrl	equ	0xFF6
  3173                           tablat	equ	0xFF5
  3174                           prodh	equ	0xFF4
  3175                           prodl	equ	0xFF3
  3176                           postinc0	equ	0xFEE
  3177                           wreg	equ	0xFE8
  3178                           indf2	equ	0xFDF
  3179                           postinc2	equ	0xFDE
  3180                           postdec2	equ	0xFDD
  3181                           fsr2h	equ	0xFDA
  3182                           fsr2l	equ	0xFD9
  3183                           status	equ	0xFD8
  3184                           
  3185 ;; *************** function _I2C_Read *****************
  3186 ;; Defined at:
  3187 ;;		line 72 in file "i2c.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;		None
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;		None
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      unsigned char 
  3194 ;; Registers used:
  3195 ;;		wreg, status,2, status,0, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;Total ram usage:        0 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    2
  3208 ;; This function calls:
  3209 ;;		_I2C_Wait
  3210 ;; This function is called by:
  3211 ;;		_RTC_READ_TIME
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text19
  3216  001D6E                     __ptext19:
  3217                           	opt stack 0
  3218  001D6E                     _I2C_Read:
  3219                           	opt stack 27
  3220                           
  3221                           ;i2c.c: 73: I2C_Wait();
  3222                           
  3223                           ;incstack = 0
  3224  001D6E  ECC1  F00E         	call	_I2C_Wait	;wreg free
  3225                           
  3226                           ;i2c.c: 74: RCEN = 1;
  3227  001D72  86C5               	bsf	4037,3,c	;volatile
  3228                           
  3229                           ;i2c.c: 75: while (!SSPIF);
  3230  001D74  D000               	goto	l236
  3231  001D76                     l236:
  3232  001D76  A69E               	btfss	3998,3,c	;volatile
  3233  001D78  D7FE               	goto	l236
  3234                           
  3235                           ;i2c.c: 76: SSPIF = 0;
  3236  001D7A  969E               	bcf	3998,3,c	;volatile
  3237                           
  3238                           ;i2c.c: 77: return SSPBUF;
  3239  001D7C  50C9               	movf	4041,w,c	;volatile
  3240  001D7E  D000               	goto	l239
  3241  001D80                     l239:
  3242  001D80  0012               	return		;funcret
  3243  001D82                     __end_of_I2C_Read:
  3244                           	opt stack 0
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           prodh	equ	0xFF4
  3250                           prodl	equ	0xFF3
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function _I2C_NACK *****************
  3261 ;; Defined at:
  3262 ;;		line 57 in file "i2c.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;		None
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;		None
  3267 ;; Return value:  Size  Location     Type
  3268 ;;		None               void
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;Total ram usage:        0 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    2
  3283 ;; This function calls:
  3284 ;;		_I2C_Wait
  3285 ;; This function is called by:
  3286 ;;		_RTC_READ_TIME
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text20
  3291  001DA8                     __ptext20:
  3292                           	opt stack 0
  3293  001DA8                     _I2C_NACK:
  3294                           	opt stack 27
  3295                           
  3296                           ;i2c.c: 59: I2C_Wait();
  3297                           
  3298                           ;incstack = 0
  3299  001DA8  ECC1  F00E         	call	_I2C_Wait	;wreg free
  3300                           
  3301                           ;i2c.c: 60: ACKDT = 1;
  3302  001DAC  8AC5               	bsf	4037,5,c	;volatile
  3303                           
  3304                           ;i2c.c: 61: ACKEN = 1;
  3305  001DAE  88C5               	bsf	4037,4,c	;volatile
  3306  001DB0  0012               	return		;funcret
  3307  001DB2                     __end_of_I2C_NACK:
  3308                           	opt stack 0
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           prodh	equ	0xFF4
  3314                           prodl	equ	0xFF3
  3315                           postinc0	equ	0xFEE
  3316                           wreg	equ	0xFE8
  3317                           indf2	equ	0xFDF
  3318                           postinc2	equ	0xFDE
  3319                           postdec2	equ	0xFDD
  3320                           fsr2h	equ	0xFDA
  3321                           fsr2l	equ	0xFD9
  3322                           status	equ	0xFD8
  3323                           
  3324 ;; *************** function _I2C_ACK *****************
  3325 ;; Defined at:
  3326 ;;		line 50 in file "i2c.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;		None
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;		None
  3331 ;; Return value:  Size  Location     Type
  3332 ;;		None               void
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;Total ram usage:        0 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    2
  3347 ;; This function calls:
  3348 ;;		_I2C_Wait
  3349 ;; This function is called by:
  3350 ;;		_RTC_READ_TIME
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text21
  3355  001DB2                     __ptext21:
  3356                           	opt stack 0
  3357  001DB2                     _I2C_ACK:
  3358                           	opt stack 27
  3359                           
  3360                           ;i2c.c: 52: I2C_Wait();
  3361                           
  3362                           ;incstack = 0
  3363  001DB2  ECC1  F00E         	call	_I2C_Wait	;wreg free
  3364                           
  3365                           ;i2c.c: 53: ACKDT = 0;
  3366  001DB6  9AC5               	bcf	4037,5,c	;volatile
  3367                           
  3368                           ;i2c.c: 54: ACKEN = 1;
  3369  001DB8  88C5               	bsf	4037,4,c	;volatile
  3370  001DBA  0012               	return		;funcret
  3371  001DBC                     __end_of_I2C_ACK:
  3372                           	opt stack 0
  3373                           tblptru	equ	0xFF8
  3374                           tblptrh	equ	0xFF7
  3375                           tblptrl	equ	0xFF6
  3376                           tablat	equ	0xFF5
  3377                           prodh	equ	0xFF4
  3378                           prodl	equ	0xFF3
  3379                           postinc0	equ	0xFEE
  3380                           wreg	equ	0xFE8
  3381                           indf2	equ	0xFDF
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _I2C_Wait *****************
  3389 ;; Defined at:
  3390 ;;		line 27 in file "i2c.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;		None
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;		None               void
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:        1 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    1
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_I2C_Start
  3415 ;;		_I2C_Stop
  3416 ;;		_I2C_Restart
  3417 ;;		_I2C_ACK
  3418 ;;		_I2C_NACK
  3419 ;;		_I2C_Write
  3420 ;;		_I2C_Read
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text22
  3425  001D82                     __ptext22:
  3426                           	opt stack 0
  3427  001D82                     _I2C_Wait:
  3428                           	opt stack 27
  3429                           
  3430                           ;i2c.c: 29: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3431                           
  3432                           ;incstack = 0
  3433  001D82  D000               	goto	l212
  3434  001D84                     l212:
  3435  001D84  B4C7               	btfsc	4039,2,c	;volatile
  3436  001D86  D7FE               	goto	l212
  3437  001D88  CFC5 F01F          	movff	4037,??_I2C_Wait	;volatile
  3438  001D8C  0E1F               	movlw	31
  3439  001D8E  161F               	andwf	??_I2C_Wait,f,c
  3440  001D90  A4D8               	btfss	status,2,c
  3441  001D92  D7F8               	goto	l212
  3442  001D94  0012               	return		;funcret
  3443  001D96                     __end_of_I2C_Wait:
  3444                           	opt stack 0
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           prodh	equ	0xFF4
  3450                           prodl	equ	0xFF3
  3451                           postinc0	equ	0xFEE
  3452                           wreg	equ	0xFE8
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _LCD_Initialize *****************
  3461 ;; Defined at:
  3462 ;;		line 5 in file "lcd.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;		None
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;		None
  3467 ;; Return value:  Size  Location     Type
  3468 ;;		None               void
  3469 ;; Registers used:
  3470 ;;		wreg, status,2, status,0, cstack
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;Total ram usage:        1 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    3
  3483 ;; This function calls:
  3484 ;;		_LCDPutCmd
  3485 ;; This function is called by:
  3486 ;;		_main
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text23
  3491  001B52                     __ptext23:
  3492                           	opt stack 0
  3493  001B52                     _LCD_Initialize:
  3494                           	opt stack 27
  3495                           
  3496                           ;lcd.c: 8: PORTD = 0;
  3497                           
  3498                           ;incstack = 0
  3499  001B52  0E00               	movlw	0
  3500  001B54  6E83               	movwf	3971,c	;volatile
  3501                           
  3502                           ;lcd.c: 10: TRISD = 0x00;
  3503  001B56  0E00               	movlw	0
  3504  001B58  6E95               	movwf	3989,c	;volatile
  3505                           
  3506                           ;lcd.c: 13: PORTDbits.RD7 = 1;
  3507  001B5A  8E83               	bsf	3971,7,c	;volatile
  3508                           
  3509                           ;lcd.c: 16: _delay((unsigned long)((15)*(8e6/4000.0)));
  3510  001B5C  0E27               	movlw	39
  3511  001B5E  6E23               	movwf	??_LCD_Initialize& (0+255),c
  3512  001B60  0EF5               	movlw	245
  3513  001B62                     u1327:
  3514  001B62  2EE8               	decfsz	wreg,f,c
  3515  001B64  D7FE               	goto	u1327
  3516  001B66  2E23               	decfsz	??_LCD_Initialize& (0+255),f,c
  3517  001B68  D7FC               	goto	u1327
  3518  001B6A  F000               	nop	
  3519                           
  3520                           ;lcd.c: 19: LCDPutCmd(0x32);
  3521  001B6C  0E32               	movlw	50
  3522  001B6E  ECC6  F00D         	call	_LCDPutCmd
  3523                           
  3524                           ;lcd.c: 22: LCDPutCmd(0x28);
  3525  001B72  0E28               	movlw	40
  3526  001B74  ECC6  F00D         	call	_LCDPutCmd
  3527                           
  3528                           ;lcd.c: 25: LCDPutCmd(0x0C);
  3529  001B78  0E0C               	movlw	12
  3530  001B7A  ECC6  F00D         	call	_LCDPutCmd
  3531                           
  3532                           ;lcd.c: 27: LCDPutCmd(0x01);
  3533  001B7E  0E01               	movlw	1
  3534  001B80  ECC6  F00D         	call	_LCDPutCmd
  3535                           
  3536                           ;lcd.c: 30: LCDPutCmd(0x06);
  3537  001B84  0E06               	movlw	6
  3538  001B86  ECC6  F00D         	call	_LCDPutCmd
  3539  001B8A  0012               	return		;funcret
  3540  001B8C                     __end_of_LCD_Initialize:
  3541                           	opt stack 0
  3542                           tblptru	equ	0xFF8
  3543                           tblptrh	equ	0xFF7
  3544                           tblptrl	equ	0xFF6
  3545                           tablat	equ	0xFF5
  3546                           prodh	equ	0xFF4
  3547                           prodl	equ	0xFF3
  3548                           postinc0	equ	0xFEE
  3549                           wreg	equ	0xFE8
  3550                           indf2	equ	0xFDF
  3551                           postinc2	equ	0xFDE
  3552                           postdec2	equ	0xFDD
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function _LCDPutStr *****************
  3558 ;; Defined at:
  3559 ;;		line 94 in file "lcd.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  str             2   34[COMRAM] PTR const unsigned char 
  3562 ;;		 -> STR_14(6), STR_12(3), STR_10(3), STR_8(3), 
  3563 ;;		 -> STR_6(8), STR_4(6), STR_2(8), out(16), 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  i               1   38[COMRAM] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;		None               void
  3568 ;; Registers used:
  3569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3575 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;Total ram usage:        5 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    3
  3582 ;; This function calls:
  3583 ;;		_LCDPutChar
  3584 ;; This function is called by:
  3585 ;;		_main
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text24
  3590  00196C                     __ptext24:
  3591                           	opt stack 0
  3592  00196C                     _LCDPutStr:
  3593                           	opt stack 27
  3594                           
  3595                           ;lcd.c: 96: uint8_t i=0;
  3596                           
  3597                           ;incstack = 0
  3598  00196C  0E00               	movlw	0
  3599  00196E  6E27               	movwf	LCDPutStr@i,c
  3600                           
  3601                           ;lcd.c: 99: while (str[i])
  3602  001970  D01F               	goto	l1685
  3603  001972                     l1681:
  3604                           
  3605                           ;lcd.c: 100: {
  3606                           ;lcd.c: 102: LCDPutChar(str[i++]);
  3607  001972  5027               	movf	LCDPutStr@i,w,c
  3608  001974  0D01               	mullw	1
  3609  001976  C023  F025         	movff	LCDPutStr@str,??_LCDPutStr
  3610  00197A  C024  F026         	movff	LCDPutStr@str+1,??_LCDPutStr+1
  3611  00197E  50F3               	movf	prodl,w,c
  3612  001980  2625               	addwf	??_LCDPutStr,f,c
  3613  001982  50F4               	movf	prodh,w,c
  3614  001984  2226               	addwfc	??_LCDPutStr+1,f,c
  3615  001986  C025  FFF6         	movff	??_LCDPutStr,tblptrl
  3616  00198A  C026  FFF7         	movff	??_LCDPutStr+1,tblptrh
  3617  00198E  0E00               	movlw	low (__smallconst shr (0+16))
  3618  001990  6EF8               	movwf	tblptru,c
  3619  001992  0E0F               	movlw	(high __ramtop+-1)
  3620  001994  64F7               	cpfsgt	tblptrh,c
  3621  001996  D003               	bra	u927
  3622  001998  0008               	tblrd		*
  3623  00199A  50F5               	movf	tablat,w,c
  3624  00199C  D005               	bra	u920
  3625  00199E                     u927:
  3626  00199E  CFF6 FFE9          	movff	tblptrl,fsr0l
  3627  0019A2  CFF7 FFEA          	movff	tblptrh,fsr0h
  3628  0019A6  50EF               	movf	indf0,w,c
  3629  0019A8                     u920:
  3630  0019A8  EC16  F00E         	call	_LCDPutChar
  3631  0019AC  2A27               	incf	LCDPutStr@i,f,c
  3632  0019AE  D000               	goto	l1685
  3633  0019B0                     l1685:
  3634  0019B0  5027               	movf	LCDPutStr@i,w,c
  3635  0019B2  0D01               	mullw	1
  3636  0019B4  C023  F025         	movff	LCDPutStr@str,??_LCDPutStr
  3637  0019B8  C024  F026         	movff	LCDPutStr@str+1,??_LCDPutStr+1
  3638  0019BC  50F3               	movf	prodl,w,c
  3639  0019BE  2625               	addwf	??_LCDPutStr,f,c
  3640  0019C0  50F4               	movf	prodh,w,c
  3641  0019C2  2226               	addwfc	??_LCDPutStr+1,f,c
  3642  0019C4  C025  FFF6         	movff	??_LCDPutStr,tblptrl
  3643  0019C8  C026  FFF7         	movff	??_LCDPutStr+1,tblptrh
  3644  0019CC  0E00               	movlw	low (__smallconst shr (0+16))
  3645  0019CE  6EF8               	movwf	tblptru,c
  3646  0019D0  0E0F               	movlw	(high __ramtop+-1)
  3647  0019D2  64F7               	cpfsgt	tblptrh,c
  3648  0019D4  D003               	bra	u937
  3649  0019D6  0008               	tblrd		*
  3650  0019D8  50F5               	movf	tablat,w,c
  3651  0019DA  D005               	bra	u930
  3652  0019DC                     u937:
  3653  0019DC  CFF6 FFE9          	movff	tblptrl,fsr0l
  3654  0019E0  CFF7 FFEA          	movff	tblptrh,fsr0h
  3655  0019E4  50EF               	movf	indf0,w,c
  3656  0019E6                     u930:
  3657  0019E6  0900               	iorlw	0
  3658  0019E8  A4D8               	btfss	status,2,c
  3659  0019EA  D7C3               	goto	l1681
  3660  0019EC  0012               	return		;funcret
  3661  0019EE                     __end_of_LCDPutStr:
  3662                           	opt stack 0
  3663                           tblptru	equ	0xFF8
  3664                           tblptrh	equ	0xFF7
  3665                           tblptrl	equ	0xFF6
  3666                           tablat	equ	0xFF5
  3667                           prodh	equ	0xFF4
  3668                           prodl	equ	0xFF3
  3669                           indf0	equ	0xFEF
  3670                           postinc0	equ	0xFEE
  3671                           fsr0h	equ	0xFEA
  3672                           fsr0l	equ	0xFE9
  3673                           wreg	equ	0xFE8
  3674                           indf2	equ	0xFDF
  3675                           postinc2	equ	0xFDE
  3676                           postdec2	equ	0xFDD
  3677                           fsr2h	equ	0xFDA
  3678                           fsr2l	equ	0xFD9
  3679                           status	equ	0xFD8
  3680                           
  3681 ;; *************** function _LCDPutChar *****************
  3682 ;; Defined at:
  3683 ;;		line 62 in file "lcd.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;  ch              1    wreg     unsigned char 
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;  ch              1   33[COMRAM] unsigned char 
  3688 ;; Return value:  Size  Location     Type
  3689 ;;		None               void
  3690 ;; Registers used:
  3691 ;;		wreg, status,2, status,0, cstack
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;Total ram usage:        2 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; Hardware stack levels required when called:    2
  3704 ;; This function calls:
  3705 ;;		_LCDWriteNibble
  3706 ;; This function is called by:
  3707 ;;		_LCDPutStr
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           	psect	text25
  3712  001C2C                     __ptext25:
  3713                           	opt stack 0
  3714  001C2C                     _LCDPutChar:
  3715                           	opt stack 27
  3716                           
  3717                           ;incstack = 0
  3718                           ;LCDPutChar@ch stored from wreg
  3719  001C2C  6E22               	movwf	LCDPutChar@ch,c
  3720                           
  3721                           ;lcd.c: 64: _delay((unsigned long)((5)*(8e6/4000.0)));
  3722  001C2E  0E0D               	movlw	13
  3723  001C30  6E21               	movwf	??_LCDPutChar& (0+255),c
  3724  001C32  0EFC               	movlw	252
  3725  001C34                     u1337:
  3726  001C34  2EE8               	decfsz	wreg,f,c
  3727  001C36  D7FE               	goto	u1337
  3728  001C38  2E21               	decfsz	??_LCDPutChar& (0+255),f,c
  3729  001C3A  D7FC               	goto	u1337
  3730                           
  3731                           ;lcd.c: 67: LCDWriteNibble(ch,1);
  3732  001C3C  0E01               	movlw	1
  3733  001C3E  6E1F               	movwf	LCDWriteNibble@rs,c
  3734  001C40  5022               	movf	LCDPutChar@ch,w,c
  3735  001C42  EC2C  F00E         	call	_LCDWriteNibble
  3736                           
  3737                           ;lcd.c: 70: ch = (ch << 4);
  3738  001C46  3822               	swapf	LCDPutChar@ch,w,c
  3739  001C48  0BF0               	andlw	240
  3740  001C4A  6E22               	movwf	LCDPutChar@ch,c
  3741                           
  3742                           ;lcd.c: 73: LCDWriteNibble(ch,1);
  3743  001C4C  0E01               	movlw	1
  3744  001C4E  6E1F               	movwf	LCDWriteNibble@rs,c
  3745  001C50  5022               	movf	LCDPutChar@ch,w,c
  3746  001C52  EC2C  F00E         	call	_LCDWriteNibble
  3747  001C56  0012               	return		;funcret
  3748  001C58                     __end_of_LCDPutChar:
  3749                           	opt stack 0
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           prodh	equ	0xFF4
  3755                           prodl	equ	0xFF3
  3756                           indf0	equ	0xFEF
  3757                           postinc0	equ	0xFEE
  3758                           fsr0h	equ	0xFEA
  3759                           fsr0l	equ	0xFE9
  3760                           wreg	equ	0xFE8
  3761                           indf2	equ	0xFDF
  3762                           postinc2	equ	0xFDE
  3763                           postdec2	equ	0xFDD
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function _LCDGoto *****************
  3769 ;; Defined at:
  3770 ;;		line 107 in file "lcd.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  pos             1    wreg     unsigned char 
  3773 ;;  ln              1   34[COMRAM] unsigned char 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  pos             1   39[COMRAM] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;		None               void
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3785 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;Total ram usage:        6 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    3
  3792 ;; This function calls:
  3793 ;;		_LCDPutCmd
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text26
  3800  001B10                     __ptext26:
  3801                           	opt stack 0
  3802  001B10                     _LCDGoto:
  3803                           	opt stack 27
  3804                           
  3805                           ;incstack = 0
  3806                           ;LCDGoto@pos stored from wreg
  3807  001B10  6E28               	movwf	LCDGoto@pos,c
  3808                           
  3809                           ;lcd.c: 110: if ((ln > (2-1)) || (pos > (16-1)))
  3810  001B12  0E02               	movlw	2
  3811  001B14  6023               	cpfslt	LCDGoto@ln,c
  3812  001B16  D01C               	goto	l34
  3813  001B18  0E0F               	movlw	15
  3814  001B1A  6428               	cpfsgt	LCDGoto@pos,c
  3815  001B1C  D001               	goto	l1691
  3816                           
  3817                           ;lcd.c: 111: {
  3818                           ;lcd.c: 113: return;
  3819  001B1E  D018               	goto	l34
  3820  001B20                     l1691:
  3821                           
  3822                           ;lcd.c: 114: }
  3823                           ;lcd.c: 117: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  3824  001B20  0423               	decf	LCDGoto@ln,w,c
  3825  001B22  B4D8               	btfsc	status,2,c
  3826  001B24  D002               	goto	l1695
  3827  001B26  0E80               	movlw	128
  3828  001B28  D001               	goto	L1
  3829  001B2A                     l1695:
  3830  001B2A  0EC0               	movlw	192
  3831  001B2C                     L1:
  3832  001B2C  C028  F024         	movff	LCDGoto@pos,??_LCDGoto
  3833  001B30  6A25               	clrf	(??_LCDGoto+1)& (0+255),c
  3834  001B32  1024               	iorwf	??_LCDGoto,w,c
  3835  001B34  6E26               	movwf	_LCDGoto$116,c
  3836  001B36  5025               	movf	??_LCDGoto+1,w,c
  3837  001B38  6E27               	movwf	_LCDGoto$116+1,c
  3838  001B3A  D000               	goto	l1697
  3839  001B3C                     l1697:
  3840  001B3C  5026               	movf	_LCDGoto$116,w,c
  3841  001B3E  ECC6  F00D         	call	_LCDPutCmd
  3842                           
  3843                           ;lcd.c: 120: _delay((unsigned long)((5)*(8e6/4000.0)));
  3844  001B42  0E0D               	movlw	13
  3845  001B44  6E24               	movwf	??_LCDGoto& (0+255),c
  3846  001B46  0EFC               	movlw	252
  3847  001B48                     u1347:
  3848  001B48  2EE8               	decfsz	wreg,f,c
  3849  001B4A  D7FE               	goto	u1347
  3850  001B4C  2E24               	decfsz	??_LCDGoto& (0+255),f,c
  3851  001B4E  D7FC               	goto	u1347
  3852  001B50                     l34:
  3853  001B50  0012               	return		;funcret
  3854  001B52                     __end_of_LCDGoto:
  3855                           	opt stack 0
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           indf0	equ	0xFEF
  3863                           postinc0	equ	0xFEE
  3864                           fsr0h	equ	0xFEA
  3865                           fsr0l	equ	0xFE9
  3866                           wreg	equ	0xFE8
  3867                           indf2	equ	0xFDF
  3868                           postinc2	equ	0xFDE
  3869                           postdec2	equ	0xFDD
  3870                           fsr2h	equ	0xFDA
  3871                           fsr2l	equ	0xFD9
  3872                           status	equ	0xFD8
  3873                           
  3874 ;; *************** function _LCDPutCmd *****************
  3875 ;; Defined at:
  3876 ;;		line 77 in file "lcd.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  ch              1    wreg     unsigned char 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  ch              1   33[COMRAM] unsigned char 
  3881 ;; Return value:  Size  Location     Type
  3882 ;;		None               void
  3883 ;; Registers used:
  3884 ;;		wreg, status,2, status,0, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;Total ram usage:        2 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    2
  3897 ;; This function calls:
  3898 ;;		_LCDWriteNibble
  3899 ;; This function is called by:
  3900 ;;		_LCD_Initialize
  3901 ;;		_LCDGoto
  3902 ;;		_main
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text27
  3907  001B8C                     __ptext27:
  3908                           	opt stack 0
  3909  001B8C                     _LCDPutCmd:
  3910                           	opt stack 27
  3911                           
  3912                           ;incstack = 0
  3913                           ;LCDPutCmd@ch stored from wreg
  3914  001B8C  6E22               	movwf	LCDPutCmd@ch,c
  3915                           
  3916                           ;lcd.c: 79: _delay((unsigned long)((5)*(8e6/4000.0)));
  3917  001B8E  0E0D               	movlw	13
  3918  001B90  6E21               	movwf	??_LCDPutCmd& (0+255),c
  3919  001B92  0EFC               	movlw	252
  3920  001B94                     u1357:
  3921  001B94  2EE8               	decfsz	wreg,f,c
  3922  001B96  D7FE               	goto	u1357
  3923  001B98  2E21               	decfsz	??_LCDPutCmd& (0+255),f,c
  3924  001B9A  D7FC               	goto	u1357
  3925                           
  3926                           ;lcd.c: 82: LCDWriteNibble(ch,0);
  3927  001B9C  0E00               	movlw	0
  3928  001B9E  6E1F               	movwf	LCDWriteNibble@rs,c
  3929  001BA0  5022               	movf	LCDPutCmd@ch,w,c
  3930  001BA2  EC2C  F00E         	call	_LCDWriteNibble
  3931                           
  3932                           ;lcd.c: 85: ch = (ch << 4);
  3933  001BA6  3822               	swapf	LCDPutCmd@ch,w,c
  3934  001BA8  0BF0               	andlw	240
  3935  001BAA  6E22               	movwf	LCDPutCmd@ch,c
  3936                           
  3937                           ;lcd.c: 87: _delay((unsigned long)((1)*(8e6/4000.0)));
  3938  001BAC  0E03               	movlw	3
  3939  001BAE  6E21               	movwf	??_LCDPutCmd& (0+255),c
  3940  001BB0  0E98               	movlw	152
  3941  001BB2                     u1367:
  3942  001BB2  2EE8               	decfsz	wreg,f,c
  3943  001BB4  D7FE               	goto	u1367
  3944  001BB6  2E21               	decfsz	??_LCDPutCmd& (0+255),f,c
  3945  001BB8  D7FC               	goto	u1367
  3946                           
  3947                           ;lcd.c: 90: LCDWriteNibble(ch,0);
  3948  001BBA  0E00               	movlw	0
  3949  001BBC  6E1F               	movwf	LCDWriteNibble@rs,c
  3950  001BBE  5022               	movf	LCDPutCmd@ch,w,c
  3951  001BC0  EC2C  F00E         	call	_LCDWriteNibble
  3952  001BC4  0012               	return		;funcret
  3953  001BC6                     __end_of_LCDPutCmd:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           indf0	equ	0xFEF
  3962                           postinc0	equ	0xFEE
  3963                           fsr0h	equ	0xFEA
  3964                           fsr0l	equ	0xFE9
  3965                           wreg	equ	0xFE8
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _LCDWriteNibble *****************
  3974 ;; Defined at:
  3975 ;;		line 35 in file "lcd.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  ch              1    wreg     unsigned char 
  3978 ;;  rs              1   30[COMRAM] unsigned char 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  ch              1   31[COMRAM] unsigned char 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, status,2, status,0
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3990 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;Total ram usage:        2 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    1
  3997 ;; This function calls:
  3998 ;;		Nothing
  3999 ;; This function is called by:
  4000 ;;		_LCDPutChar
  4001 ;;		_LCDPutCmd
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text28
  4006  001C58                     __ptext28:
  4007                           	opt stack 0
  4008  001C58                     _LCDWriteNibble:
  4009                           	opt stack 27
  4010                           
  4011                           ;incstack = 0
  4012                           ;LCDWriteNibble@ch stored from wreg
  4013  001C58  6E20               	movwf	LCDWriteNibble@ch,c
  4014                           
  4015                           ;lcd.c: 38: ch = (ch >> 4);
  4016  001C5A  3820               	swapf	LCDWriteNibble@ch,w,c
  4017  001C5C  0B0F               	andlw	15
  4018  001C5E  6E20               	movwf	LCDWriteNibble@ch,c
  4019                           
  4020                           ;lcd.c: 41: ch = (ch & 0x0F);
  4021  001C60  5020               	movf	LCDWriteNibble@ch,w,c
  4022  001C62  0B0F               	andlw	15
  4023  001C64  6E20               	movwf	LCDWriteNibble@ch,c
  4024                           
  4025                           ;lcd.c: 44: PORTD = (PORTD & 0xF0);
  4026  001C66  5083               	movf	3971,w,c	;volatile
  4027  001C68  0BF0               	andlw	240
  4028  001C6A  6E83               	movwf	3971,c	;volatile
  4029                           
  4030                           ;lcd.c: 47: PORTD = (PORTD | ch);
  4031  001C6C  5083               	movf	3971,w,c	;volatile
  4032  001C6E  1020               	iorwf	LCDWriteNibble@ch,w,c
  4033  001C70  6E83               	movwf	3971,c	;volatile
  4034                           
  4035                           ;lcd.c: 50: PORTDbits.RD4 = rs;
  4036  001C72  B01F               	btfsc	LCDWriteNibble@rs,0,c
  4037  001C74  D002               	bra	u715
  4038  001C76  9883               	bcf	3971,4,c	;volatile
  4039  001C78  D001               	bra	u716
  4040  001C7A                     u715:
  4041  001C7A  8883               	bsf	3971,4,c	;volatile
  4042  001C7C                     u716:
  4043                           
  4044                           ;lcd.c: 53: PORTDbits.RD5 = 0;
  4045  001C7C  9A83               	bcf	3971,5,c	;volatile
  4046                           
  4047                           ;lcd.c: 56: PORTDbits.RD6 = 1;
  4048  001C7E  8C83               	bsf	3971,6,c	;volatile
  4049                           
  4050                           ;lcd.c: 59: PORTDbits.RD6 = 0;
  4051  001C80  9C83               	bcf	3971,6,c	;volatile
  4052  001C82  0012               	return		;funcret
  4053  001C84                     __end_of_LCDWriteNibble:
  4054                           	opt stack 0
  4055                           tblptru	equ	0xFF8
  4056                           tblptrh	equ	0xFF7
  4057                           tblptrl	equ	0xFF6
  4058                           tablat	equ	0xFF5
  4059                           prodh	equ	0xFF4
  4060                           prodl	equ	0xFF3
  4061                           indf0	equ	0xFEF
  4062                           postinc0	equ	0xFEE
  4063                           fsr0h	equ	0xFEA
  4064                           fsr0l	equ	0xFE9
  4065                           wreg	equ	0xFE8
  4066                           indf2	equ	0xFDF
  4067                           postinc2	equ	0xFDE
  4068                           postdec2	equ	0xFDD
  4069                           fsr2h	equ	0xFDA
  4070                           fsr2l	equ	0xFD9
  4071                           status	equ	0xFD8
  4072                           
  4073 ;; *************** function _I2C_Master_Init *****************
  4074 ;; Defined at:
  4075 ;;		line 3 in file "i2c.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;		None
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;		None               void
  4082 ;; Registers used:
  4083 ;;		wreg, status,2
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;Total ram usage:        0 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    1
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text29
  4104  001D58                     __ptext29:
  4105                           	opt stack 0
  4106  001D58                     _I2C_Master_Init:
  4107                           	opt stack 29
  4108                           
  4109                           ;i2c.c: 5: SSPCON1 = 0x28;
  4110                           
  4111                           ;incstack = 0
  4112  001D58  0E28               	movlw	40
  4113  001D5A  6EC6               	movwf	4038,c	;volatile
  4114                           
  4115                           ;i2c.c: 6: SSPCON2 = 0x00;
  4116  001D5C  0E00               	movlw	0
  4117  001D5E  6EC5               	movwf	4037,c	;volatile
  4118                           
  4119                           ;i2c.c: 7: SSPSTAT = 0x00;
  4120  001D60  0E00               	movlw	0
  4121  001D62  6EC7               	movwf	4039,c	;volatile
  4122                           
  4123                           ;i2c.c: 8: SSPADD = (int)((8e6 / 4) / 1e5) - 1;
  4124  001D64  0E13               	movlw	19
  4125  001D66  6EC8               	movwf	4040,c	;volatile
  4126                           
  4127                           ;i2c.c: 9: TRISC3 = 1;
  4128  001D68  8694               	bsf	3988,3,c	;volatile
  4129                           
  4130                           ;i2c.c: 10: TRISC4 = 1;
  4131  001D6A  8894               	bsf	3988,4,c	;volatile
  4132  001D6C  0012               	return		;funcret
  4133  001D6E                     __end_of_I2C_Master_Init:
  4134                           	opt stack 0
  4135                           tblptru	equ	0xFF8
  4136                           tblptrh	equ	0xFF7
  4137                           tblptrl	equ	0xFF6
  4138                           tablat	equ	0xFF5
  4139                           prodh	equ	0xFF4
  4140                           prodl	equ	0xFF3
  4141                           indf0	equ	0xFEF
  4142                           postinc0	equ	0xFEE
  4143                           fsr0h	equ	0xFEA
  4144                           fsr0l	equ	0xFE9
  4145                           wreg	equ	0xFE8
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function _ADC_start *****************
  4154 ;; Defined at:
  4155 ;;		line 14 in file "adc-lib.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  ANx             1    wreg     unsigned char 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  ANx             1   33[COMRAM] unsigned char 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  2   30[COMRAM] int 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2, status,0
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4169 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;Total ram usage:        4 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    1
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text30
  4184  001CCE                     __ptext30:
  4185                           	opt stack 0
  4186  001CCE                     _ADC_start:
  4187                           	opt stack 29
  4188                           
  4189                           ;incstack = 0
  4190                           ;ADC_start@ANx stored from wreg
  4191  001CCE  6E22               	movwf	ADC_start@ANx,c
  4192                           
  4193                           ;adc-lib.c: 16: ADCON0bits.CHS = ANx;
  4194  001CD0  C022  F021         	movff	ADC_start@ANx,??_ADC_start
  4195  001CD4  4621               	rlncf	??_ADC_start,f,c
  4196  001CD6  4621               	rlncf	??_ADC_start,f,c
  4197  001CD8  50C2               	movf	4034,w,c	;volatile
  4198  001CDA  1821               	xorwf	??_ADC_start,w,c
  4199  001CDC  0BC3               	andlw	-61
  4200  001CDE  1821               	xorwf	??_ADC_start,w,c
  4201  001CE0  6EC2               	movwf	4034,c	;volatile
  4202                           
  4203                           ;adc-lib.c: 17: return ADRES;
  4204  001CE2  CFC3 F01F          	movff	4035,?_ADC_start	;volatile
  4205  001CE6  CFC4 F020          	movff	4036,?_ADC_start+1	;volatile
  4206  001CEA  D000               	goto	l54
  4207  001CEC                     l54:
  4208  001CEC  0012               	return		;funcret
  4209  001CEE                     __end_of_ADC_start:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           indf0	equ	0xFEF
  4218                           postinc0	equ	0xFEE
  4219                           fsr0h	equ	0xFEA
  4220                           fsr0l	equ	0xFE9
  4221                           wreg	equ	0xFE8
  4222                           indf2	equ	0xFDF
  4223                           postinc2	equ	0xFDE
  4224                           postdec2	equ	0xFDD
  4225                           fsr2h	equ	0xFDA
  4226                           fsr2l	equ	0xFD9
  4227                           status	equ	0xFD8
  4228                           
  4229 ;; *************** function _ADC_init *****************
  4230 ;; Defined at:
  4231 ;;		line 5 in file "adc-lib.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;  ch_no           1    wreg     unsigned char 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  ch_no           1   31[COMRAM] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;		None               void
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;Total ram usage:        2 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    1
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_main
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text31
  4260  001CEE                     __ptext31:
  4261                           	opt stack 0
  4262  001CEE                     _ADC_init:
  4263                           	opt stack 29
  4264                           
  4265                           ;incstack = 0
  4266                           ;ADC_init@ch_no stored from wreg
  4267  001CEE  6E20               	movwf	ADC_init@ch_no,c
  4268                           
  4269                           ;adc-lib.c: 7: ADCON1bits.VCFG = 0;
  4270  001CF0  0ECF               	movlw	-49
  4271  001CF2  16C1               	andwf	4033,f,c	;volatile
  4272                           
  4273                           ;adc-lib.c: 8: ADCON1bits.PCFG = 15 - ch_no;
  4274  001CF4  5020               	movf	ADC_init@ch_no,w,c
  4275  001CF6  0800               	sublw	0
  4276  001CF8  6E1F               	movwf	??_ADC_init& (0+255),c
  4277  001CFA  0E0F               	movlw	15
  4278  001CFC  261F               	addwf	??_ADC_init,f,c
  4279  001CFE  50C1               	movf	4033,w,c	;volatile
  4280  001D00  181F               	xorwf	??_ADC_init,w,c
  4281  001D02  0BF0               	andlw	-16
  4282  001D04  181F               	xorwf	??_ADC_init,w,c
  4283  001D06  6EC1               	movwf	4033,c	;volatile
  4284                           
  4285                           ;adc-lib.c: 9: ADFM = 1;
  4286  001D08  8EC0               	bsf	4032,7,c	;volatile
  4287                           
  4288                           ;adc-lib.c: 10: ADON = 1;
  4289  001D0A  80C2               	bsf	4034,0,c	;volatile
  4290  001D0C  0012               	return		;funcret
  4291  001D0E                     __end_of_ADC_init:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           indf0	equ	0xFEF
  4300                           postinc0	equ	0xFEE
  4301                           fsr0h	equ	0xFEA
  4302                           fsr0l	equ	0xFE9
  4303                           wreg	equ	0xFE8
  4304                           indf2	equ	0xFDF
  4305                           postinc2	equ	0xFDE
  4306                           postdec2	equ	0xFDD
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _ISRead *****************
  4312 ;; Defined at:
  4313 ;;		line 80 in file "i2c.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  Dummy           1   14[COMRAM] unsigned char 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;		None               void
  4320 ;; Registers used:
  4321 ;;		None
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:       15 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		Interrupt level 2
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340 ;; *************** function _ISWrite *****************
  4341 ;; Defined at:
  4342 ;;		line 95 in file "i2c.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;		None
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  deummy          1   29[COMRAM] unsigned char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;		None               void
  4349 ;; Registers used:
  4350 ;;		None
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;Total ram usage:       15 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		Interrupt level 2
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	intcode
  4370  000008                     __pintcode:
  4371                           	opt stack 0
  4372  000008                     _ISRead:
  4373                           	opt stack 27
  4374                           
  4375                           ;incstack = 0
  4376  000008  CFFA F001          	movff	pclath,??_ISRead
  4377  00000C  CFFB F002          	movff	pclatu,??_ISRead+1
  4378  000010  CFE9 F003          	movff	fsr0l,??_ISRead+2
  4379  000014  CFEA F004          	movff	fsr0h,??_ISRead+3
  4380  000018  CFE1 F005          	movff	fsr1l,??_ISRead+4
  4381  00001C  CFE2 F006          	movff	fsr1h,??_ISRead+5
  4382  000020  CFD9 F007          	movff	fsr2l,??_ISRead+6
  4383  000024  CFDA F008          	movff	fsr2h,??_ISRead+7
  4384  000028  CFF3 F009          	movff	prodl,??_ISRead+8
  4385  00002C  CFF4 F00A          	movff	prodh,??_ISRead+9
  4386  000030  CFF6 F00B          	movff	tblptrl,??_ISRead+10
  4387  000034  CFF7 F00C          	movff	tblptrh,??_ISRead+11
  4388  000038  CFF8 F00D          	movff	tblptru,??_ISRead+12
  4389  00003C  CFF5 F00E          	movff	tablat,??_ISRead+13
  4390                           
  4391                           ;i2c.c: 82: if (SSPIF) {
  4392  000040  A69E               	btfss	3998,3,c	;volatile
  4393  000042  D00B               	goto	i2l247
  4394                           
  4395                           ;i2c.c: 83: if (!R_nW)
  4396  000044  B4C7               	btfsc	4039,2,c	;volatile
  4397  000046  D006               	goto	i2l243
  4398                           
  4399                           ;i2c.c: 84: {
  4400                           ;i2c.c: 85: char Dummy = SSPBUF;
  4401  000048  CFC9 F00F          	movff	4041,ISRead@Dummy	;volatile
  4402                           
  4403                           ;i2c.c: 86: CKP = 1;
  4404  00004C  88C6               	bsf	4038,4,c	;volatile
  4405                           
  4406                           ;i2c.c: 87: while (!BF);
  4407  00004E  D000               	goto	i2l244
  4408  000050                     i2l244:
  4409  000050  A0C7               	btfss	4039,0,c	;volatile
  4410  000052  D7FE               	goto	i2l244
  4411  000054                     i2l243:
  4412                           
  4413                           ;i2c.c: 89: }
  4414                           ;i2c.c: 90: CKP = 1;
  4415  000054  88C6               	bsf	4038,4,c	;volatile
  4416                           
  4417                           ;i2c.c: 91: SSPIF = 0;
  4418  000056  969E               	bcf	3998,3,c	;volatile
  4419  000058  D000               	goto	i2l247
  4420  00005A                     i2l247:
  4421  00005A  C00E  FFF5         	movff	??_ISRead+13,tablat
  4422  00005E  C00D  FFF8         	movff	??_ISRead+12,tblptru
  4423  000062  C00C  FFF7         	movff	??_ISRead+11,tblptrh
  4424  000066  C00B  FFF6         	movff	??_ISRead+10,tblptrl
  4425  00006A  C00A  FFF4         	movff	??_ISRead+9,prodh
  4426  00006E  C009  FFF3         	movff	??_ISRead+8,prodl
  4427  000072  C008  FFDA         	movff	??_ISRead+7,fsr2h
  4428  000076  C007  FFD9         	movff	??_ISRead+6,fsr2l
  4429  00007A  C006  FFE2         	movff	??_ISRead+5,fsr1h
  4430  00007E  C005  FFE1         	movff	??_ISRead+4,fsr1l
  4431  000082  C004  FFEA         	movff	??_ISRead+3,fsr0h
  4432  000086  C003  FFE9         	movff	??_ISRead+2,fsr0l
  4433  00008A  C002  FFFB         	movff	??_ISRead+1,pclatu
  4434  00008E  C001  FFFA         	movff	??_ISRead,pclath
  4435  000092  0011               	retfie		f
  4436  000094                     __end_of_ISRead:
  4437                           	opt stack 0
  4438  000094                     _ISWrite:
  4439                           	opt stack 27
  4440                           
  4441                           ;incstack = 0
  4442  000094  CFFA F010          	movff	pclath,??_ISWrite
  4443  000098  CFFB F011          	movff	pclatu,??_ISWrite+1
  4444  00009C  CFE9 F012          	movff	fsr0l,??_ISWrite+2
  4445  0000A0  ED33  F00C         	call	int_func,f	;refresh shadow registers
  4446                           pclatu	equ	0xFFB
  4447                           pclath	equ	0xFFA
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           prodh	equ	0xFF4
  4453                           prodl	equ	0xFF3
  4454                           indf0	equ	0xFEF
  4455                           postinc0	equ	0xFEE
  4456                           fsr0h	equ	0xFEA
  4457                           fsr0l	equ	0xFE9
  4458                           wreg	equ	0xFE8
  4459                           fsr1h	equ	0xFE2
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468                           	psect	intcode_body
  4469  001866                     __pintcode_body:
  4470                           	opt stack 27
  4471  001866                     int_func:
  4472                           	opt stack 27
  4473  001866  0006               	pop		; remove dummy address from shadow register refresh
  4474  001868  CFEA F013          	movff	fsr0h,??_ISWrite+3
  4475  00186C  CFE1 F014          	movff	fsr1l,??_ISWrite+4
  4476  001870  CFE2 F015          	movff	fsr1h,??_ISWrite+5
  4477  001874  CFD9 F016          	movff	fsr2l,??_ISWrite+6
  4478  001878  CFDA F017          	movff	fsr2h,??_ISWrite+7
  4479  00187C  CFF3 F018          	movff	prodl,??_ISWrite+8
  4480  001880  CFF4 F019          	movff	prodh,??_ISWrite+9
  4481  001884  CFF6 F01A          	movff	tblptrl,??_ISWrite+10
  4482  001888  CFF7 F01B          	movff	tblptrh,??_ISWrite+11
  4483  00188C  CFF8 F01C          	movff	tblptru,??_ISWrite+12
  4484  001890  CFF5 F01D          	movff	tablat,??_ISWrite+13
  4485                           
  4486                           ;i2c.c: 97: if (SSPIF) {
  4487  001894  A69E               	btfss	3998,3,c	;volatile
  4488  001896  D00C               	goto	i2l255
  4489                           
  4490                           ;i2c.c: 98: if (R_nW) {
  4491  001898  A4C7               	btfss	4039,2,c	;volatile
  4492  00189A  D007               	goto	i2l251
  4493                           
  4494                           ;i2c.c: 99: char deummy = SSPBUF;
  4495  00189C  CFC9 F01E          	movff	4041,ISWrite@deummy	;volatile
  4496                           
  4497                           ;i2c.c: 100: BF = 0;
  4498  0018A0  90C7               	bcf	4039,0,c	;volatile
  4499                           
  4500                           ;i2c.c: 102: CKP = 1;
  4501  0018A2  88C6               	bsf	4038,4,c	;volatile
  4502                           
  4503                           ;i2c.c: 103: while (BF);
  4504  0018A4  D000               	goto	i2l252
  4505  0018A6                     i2l252:
  4506  0018A6  B0C7               	btfsc	4039,0,c	;volatile
  4507  0018A8  D7FE               	goto	i2l252
  4508  0018AA                     i2l251:
  4509                           
  4510                           ;i2c.c: 105: }
  4511                           ;i2c.c: 106: CKP = 1;
  4512  0018AA  88C6               	bsf	4038,4,c	;volatile
  4513                           
  4514                           ;i2c.c: 107: SSPIF = 0;
  4515  0018AC  969E               	bcf	3998,3,c	;volatile
  4516  0018AE  D000               	goto	i2l255
  4517  0018B0                     i2l255:
  4518  0018B0  C01D  FFF5         	movff	??_ISWrite+13,tablat
  4519  0018B4  C01C  FFF8         	movff	??_ISWrite+12,tblptru
  4520  0018B8  C01B  FFF7         	movff	??_ISWrite+11,tblptrh
  4521  0018BC  C01A  FFF6         	movff	??_ISWrite+10,tblptrl
  4522  0018C0  C019  FFF4         	movff	??_ISWrite+9,prodh
  4523  0018C4  C018  FFF3         	movff	??_ISWrite+8,prodl
  4524  0018C8  C017  FFDA         	movff	??_ISWrite+7,fsr2h
  4525  0018CC  C016  FFD9         	movff	??_ISWrite+6,fsr2l
  4526  0018D0  C015  FFE2         	movff	??_ISWrite+5,fsr1h
  4527  0018D4  C014  FFE1         	movff	??_ISWrite+4,fsr1l
  4528  0018D8  C013  FFEA         	movff	??_ISWrite+3,fsr0h
  4529  0018DC  C012  FFE9         	movff	??_ISWrite+2,fsr0l
  4530  0018E0  C011  FFFB         	movff	??_ISWrite+1,pclatu
  4531  0018E4  C010  FFFA         	movff	??_ISWrite,pclath
  4532  0018E8  0011               	retfie		f
  4533  0018EA                     __end_of_ISWrite:
  4534                           	opt stack 0
  4535                           pclatu	equ	0xFFB
  4536                           pclath	equ	0xFFA
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           prodh	equ	0xFF4
  4542                           prodl	equ	0xFF3
  4543                           indf0	equ	0xFEF
  4544                           postinc0	equ	0xFEE
  4545                           fsr0h	equ	0xFEA
  4546                           fsr0l	equ	0xFE9
  4547                           wreg	equ	0xFE8
  4548                           fsr1h	equ	0xFE2
  4549                           fsr1l	equ	0xFE1
  4550                           indf2	equ	0xFDF
  4551                           postinc2	equ	0xFDE
  4552                           postdec2	equ	0xFDD
  4553                           fsr2h	equ	0xFDA
  4554                           fsr2l	equ	0xFD9
  4555                           status	equ	0xFD8
  4556                           pclatu	equ	0xFFB
  4557                           pclath	equ	0xFFA
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           prodh	equ	0xFF4
  4563                           prodl	equ	0xFF3
  4564                           indf0	equ	0xFEF
  4565                           postinc0	equ	0xFEE
  4566                           fsr0h	equ	0xFEA
  4567                           fsr0l	equ	0xFE9
  4568                           wreg	equ	0xFE8
  4569                           fsr1h	equ	0xFE2
  4570                           fsr1l	equ	0xFE1
  4571                           indf2	equ	0xFDF
  4572                           postinc2	equ	0xFDE
  4573                           postdec2	equ	0xFDD
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578                           	psect	rparam
  4579  0000                     pclatu	equ	0xFFB
  4580                           pclath	equ	0xFFA
  4581                           tblptru	equ	0xFF8
  4582                           tblptrh	equ	0xFF7
  4583                           tblptrl	equ	0xFF6
  4584                           tablat	equ	0xFF5
  4585                           prodh	equ	0xFF4
  4586                           prodl	equ	0xFF3
  4587                           indf0	equ	0xFEF
  4588                           postinc0	equ	0xFEE
  4589                           fsr0h	equ	0xFEA
  4590                           fsr0l	equ	0xFE9
  4591                           wreg	equ	0xFE8
  4592                           fsr1h	equ	0xFE2
  4593                           fsr1l	equ	0xFE1
  4594                           indf2	equ	0xFDF
  4595                           postinc2	equ	0xFDE
  4596                           postdec2	equ	0xFDD
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8


Data Sizes:
    Strings     33
    Constant    10
    Data        0
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     63      90
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_13(CODE[10]), STR_11(CODE[10]), STR_9(CODE[10]), STR_7(CODE[10]), 
		 -> STR_5(CODE[10]), STR_3(CODE[10]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> out(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    RTC_READ_TIME@year	PTR unsigned char  size(2) Largest target is 1
		 -> year(COMRAM[1]), 

    RTC_READ_TIME@month	PTR unsigned char  size(2) Largest target is 1
		 -> month(COMRAM[1]), 

    RTC_READ_TIME@date	PTR unsigned char  size(2) Largest target is 1
		 -> date(COMRAM[1]), 

    RTC_READ_TIME@day	PTR unsigned char  size(2) Largest target is 1
		 -> day(COMRAM[1]), 

    RTC_READ_TIME@hour	PTR unsigned char  size(2) Largest target is 1
		 -> hour(COMRAM[1]), 

    RTC_READ_TIME@minute	PTR unsigned char  size(2) Largest target is 1
		 -> minute(COMRAM[1]), 

    RTC_READ_TIME@second	PTR unsigned char  size(2) Largest target is 1
		 -> second(COMRAM[1]), 

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_14(CODE[6]), STR_12(CODE[3]), STR_10(CODE[3]), STR_8(CODE[3]), 
		 -> STR_6(CODE[8]), STR_4(CODE[6]), STR_2(CODE[8]), out(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _RTC_WRITE_TIME->_decimel_to_bcd
    _decimel_to_bcd->___awdiv
    _RTC_READ_TIME->_I2C_Write
    _RTC_READ_TIME->_bcd_to_decimel
    _I2C_Write->_I2C_Wait
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _I2C_NACK->_I2C_Wait
    _I2C_ACK->_I2C_Wait
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _ISRead in COMRAM

    None.

Critical Paths under _ISWrite in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISRead in BANK0

    None.

Critical Paths under _ISWrite in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISRead in BANK1

    None.

Critical Paths under _ISWrite in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISRead in BANK2

    None.

Critical Paths under _ISWrite in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRead in BANK3

    None.

Critical Paths under _ISWrite in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRead in BANK4

    None.

Critical Paths under _ISWrite in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRead in BANK5

    None.

Critical Paths under _ISWrite in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRead in BANK6

    None.

Critical Paths under _ISWrite in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRead in BANK7

    None.

Critical Paths under _ISWrite in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRead in BANK8

    None.

Critical Paths under _ISWrite in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRead in BANK9

    None.

Critical Paths under _ISWrite in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRead in BANK10

    None.

Critical Paths under _ISWrite in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRead in BANK11

    None.

Critical Paths under _ISWrite in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRead in BANK12

    None.

Critical Paths under _ISWrite in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISRead in BANK13

    None.

Critical Paths under _ISWrite in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISRead in BANK14

    None.

Critical Paths under _ISWrite in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISRead in BANK15

    None.

Critical Paths under _ISWrite in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9340
                           _ADC_init
                          _ADC_start
                    _I2C_Master_Init
                            _LCDGoto
                          _LCDPutCmd
                          _LCDPutStr
                     _LCD_Initialize
                      _RTC_READ_TIME
                     _RTC_WRITE_TIME
                           _pwm_init
                       _pwm_set_duty
                          _pwm_start
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2578
                                             42 COMRAM    21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             30 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             30 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             37 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             30 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _pwm_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_set_duty                                         4     2      2     492
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_WRITE_TIME                                       7     1      6    1610
                                             41 COMRAM     7     1      6
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                     _decimel_to_bcd
 ---------------------------------------------------------------------------------
 (2) _decimel_to_bcd                                       3     3      0     896
                                             38 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     424
                                             30 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                             30 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _RTC_READ_TIME                                       14     0     14     955
                                             32 COMRAM    14     0     14
                            _I2C_ACK
                           _I2C_NACK
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                     _bcd_to_decimel
 ---------------------------------------------------------------------------------
 (2) _bcd_to_decimel                                       2     2      0      30
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      15
                                             31 COMRAM     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_NACK                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_ACK                                              0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Wait                                             1     1      0       0
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     413
                                             34 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            5     3      2    1399
                                             34 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           2     2      0     413
                                             32 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1    1443
                                             34 COMRAM     6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     413
                                             32 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     346
                                             30 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_start                                            4     2      2      22
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             2     2      0      15
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISRead                                              15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISWrite                                             15    15      0       0
                                             15 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_start
   _I2C_Master_Init
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutCmd
     _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _RTC_READ_TIME
     _I2C_ACK
       _I2C_Wait
     _I2C_NACK
       _I2C_Wait
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _I2C_Wait
     _bcd_to_decimel
   _RTC_WRITE_TIME
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _I2C_Wait
     _decimel_to_bcd
       ___awdiv
       ___awmod
   _pwm_init
   _pwm_set_duty
   _pwm_start
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISRead (ROOT)

 _ISWrite (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3F      5A       1       70.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5A      34        0.0%
DATA                 0      0      5A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu May 26 21:41:03 2022

                       _x 0042            _LCD_Initialize 1B52        __size_of_I2C_Start 0008  
      __size_of_I2C_Write 0012                        _BF 007E38                        l34 1B50  
             ?_LCDPutChar 0001                        l54 1CEC              ___awdiv@sign 0024  
     ___wmul@multiplicand 0021               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
                     l212 1D84                       l320 1688                       l144 11AA  
                     l233 1DA6                       l323 1CAA                       l236 1D76  
                     l156 141A                       l239 1D80                       l272 1BFC  
                     l275 1D40                       l516 1864                       l529 196A  
                     l754 1CCC                       l846 1ABA                       l856 1B06  
                     _CKP 007E34                       _GIE 007F97        __size_of_ADC_start 0020  
            __CFG_CPB$OFF 000000                       _PR2 000FCB                       _PEN 007E2A  
            __CFG_CPD$OFF 000000                       u715 1C7A                       u716 1C7C  
                     _SEN 007E28                       u920 19A8                       u930 19E6  
                     u927 199E                       u937 19DC           __end_of_I2C_ACK 1DBC  
                     _day 0055                       _out 0044              ___awmod@sign 0024  
            _pwm_set_duty 1BFE                       wreg 000FE8           ??_RTC_READ_TIME 002F  
    __size_of_I2C_Restart 0008            _decimel_to_bcd 1BC6              __CFG_LVP$OFF 000000  
         __end_of_LCDGoto 1B52              __CFG_WDT$OFF 000000                      l1513 17E6  
                    l1525 180E                      l1541 184A                      l1527 1818  
                    l1519 17F8                      l1631 1A7E                      l1615 1CC4  
                    l1545 185A                      l1537 183E                      l1529 1820  
                    l1561 190E                      l1633 1A88                      l1643 1AAE  
                    l1635 1A90                      l1651 1AD2                      l1811 15B0  
                    l1581 1960                      l1573 1944                      l1565 191C  
                    l1557 1900                      l1653 1ADC                      l1813 15B8  
                    l1805 1582                      l1567 1926                      l1655 1AE4  
                    l1751 1432                      l1681 1972                      l1569 192E  
                    l1577 1950                      l1833 1652                      l1825 15F8  
                    l1809 15A6                      l1913 124A                      l1691 1B20  
                    l1659 1AFA                      l1827 15FE                      l1819 15DA  
                    l1763 1476                      l1835 165E                      l1923 12AA  
                    l1685 19B0                      l1837 167A                      l1773 14DE  
                    l1757 144C                      l1941 134A                      l1909 122A  
                    l1853 1064                      l1695 1B2A                      l1791 153E  
                    l1775 1504                      l1951 13AA                      l1927 12CA  
                    l1871 111A                      l1697 1B3C                      l1785 152E  
                    l1937 132A                      l1795 1562                      l1787 1532  
                    l1891 119E                      l1875 1128                      l1877 1130  
                    l1799 1566                      l1887 1190                      l1899 11CA  
                    _ADFM 007E07                      _ADON 007E10                      STR_1 100B  
                    STR_2 1015                      STR_3 100B                      STR_4 101D  
                    STR_5 100B                      STR_6 1015                      STR_7 100B  
                    STR_8 1023                      STR_9 100B                      u1220 11BA  
                    u1327 1B62                      u1337 1C34                      u1347 1B48  
                    u1357 1B94                      u1367 1BB2                      _PEIE 007F96  
                    _RCEN 007E2B                      _TMR2 000FCC                      _RSEN 007E29  
                    _R_nW 007E3A          __end_of_I2C_NACK 1DB2                      _date 0054  
                    _main 102E                      _hour 0056          __end_of_I2C_Read 1D82  
         __end_of_ISWrite 18EA                      _year 005A                      fsr0h 000FEA  
                    fsr1h 000FE2                      indf0 000FEF                      fsr0l 000FE9  
                    fsr2h 000FDA                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9          __end_of_I2C_Wait 1D96          __end_of_I2C_Stop 1DC4  
                    pclat 000FFA        __size_of_LCDPutCmd 003A                      prodh 000FF4  
                    prodl 000FF3                      start 00A4        __size_of_LCDPutStr 0082  
        pwm_set_duty@duty 001F          __end_of_ADC_init 1D0E             __CFG_IESO$OFF 000000  
  __end_of_LCD_Initialize 1B8C             __CFG_MCLRE$ON 000000              ___param_bank 000010  
           ADC_init@ch_no 0020               LCDPutCmd@ch 0022          ?_I2C_Master_Init 0001  
                   ?_main 0001                     _ACKEN 007E2C                     _ACKDT 007E2D  
         __end_of___awdiv 1866                     _ADRES 000FC3                     STR_10 1026  
                   STR_11 100B                     STR_12 1029                     STR_13 100B  
                   STR_14 101D           __end_of___awmod 196C           ___awdiv@divisor 0021  
         __end_of___lwdiv 1AC4           __end_of___lwmod 1B10                     i2l251 18AA  
                   i2l243 0054                     i2l252 18A6                     i2l244 0050  
                   i2l255 18B0                     i2l247 005A           ___awdiv@counter 0023  
                   _PORTD 000F83    __end_of_decimel_to_bcd 1BFE                     _TRISD 000F95  
                   _SSPIE 007CEB                     _SSPIF 007CF3             __CFG_PWRT$OFF 000000  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBTRB$OFF 000000           __end_of_dpowers 100B           __end_of_isdigit 1CCE  
                   _month 0058         __end_of_I2C_Start 1DCC         __end_of_I2C_Write 1DA8  
                   tablat 000FF5       __size_of_LCDPutChar 002C                     status 000FD8  
         __end_of_sprintf 168A         __end_of_ADC_start 1CEE           ?_LCD_Initialize 0001  
         __initialization 1D42              __end_of_main 1428                 ??_I2C_ACK 0020  
           ISWrite@deummy 001E                    ??_main 0040             __activetblptr 000002  
               ??_LCDGoto 0024         __end_of_LCDPutCmd 1BC6              LCDPutChar@ch 0022  
         ?_decimel_to_bcd 0001         __end_of_LCDPutStr 19EE                 ??_ISWrite 0010  
                  _CCPR1L 000FBE          ___awdiv@dividend 001F                    _OSCCON 000FD3  
                  _TMR2ON 007E52                    _ISRead 0008              LCDPutStr@str 0023  
        ??_RTC_WRITE_TIME 0030                    _SSPADD 000FC8                    _TRISC2 007CA2  
                  _TRISC3 007CA3                    _TRISC4 007CA4                    _SSPBUF 000FC9  
          _LCDWriteNibble 1C58            __CFG_XINST$OFF 000000                    ___wmul 1C84  
               ??___awdiv 0023            __CFG_STVREN$ON 000000                 ??___awmod 0023  
               ??___lwdiv 0023                 ??___lwmod 002A       RTC_READ_TIME@minute 0023  
     RTC_READ_TIME@second 0021                    clear_0 1D48          ___awdiv@quotient 0025  
                  _minute 0057                    _second 0059           ___awmod@divisor 0021  
                  _result 0040           ___awmod@counter 0023                 ?_I2C_NACK 0001  
               ??_isdigit 001F                 ?_I2C_Read 0001                 ?_I2C_Wait 0001  
               ?_I2C_Stop 0001              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                 ?_ADC_init 0001  
        __end_of_pwm_init 1D2A                 ??_sprintf 0033         RTC_WRITE_TIME@day 002C  
  __end_of_LCDWriteNibble 1C84                __accesstop 0080   __end_of__initialization 1D4E  
         __CFG_PBADEN$OFF 000000             ___rparam_used 000001                 LCDGoto@ln 0023  
          __pcstackCOMRAM 0001              ??_LCDPutChar 0021                ??_I2C_NACK 0020  
              ??_I2C_Read 0020                ??_I2C_Wait 001F                ??_I2C_Stop 0020  
              ??_ADC_init 001F         RTC_READ_TIME@date 0029         RTC_READ_TIME@hour 0025  
       RTC_READ_TIME@year 002D              sprintf@width 003D           ?_LCDWriteNibble 001F  
                 ?_ISRead 0001        __end_of_LCDPutChar 1C58                   ?___wmul 001F  
       bcd_to_decimel@num 0020                   _I2C_ACK 1DB2                   _ACKSTAT 007E2E  
           ??_I2C_Restart 0020                   _LCDGoto 1B10                   _GO_DONE 007E11  
 __size_of_bcd_to_decimel 0018     __end_of_RTC_READ_TIME 17D0                   _SSPCON1 000FC6  
                 _SSPCON2 000FC5        __size_of_pwm_start 0004                   _ISWrite 0094  
                 _SSPSTAT 000FC7          ??_LCD_Initialize 0023           __size_of_ISRead 008C  
             ISRead@Dummy 000F                 _I2C_Start 1DC4                 _I2C_Write 1D96  
                 __Hparam 0000                   __Lparam 0000                 _ADC_start 1CCE  
                 ___awdiv 17D0                   ___awmod 18EA           __size_of___wmul 0028  
               ?_pwm_init 0001                   ___lwdiv 1A68                   ___lwmod 1AC4  
            __psmallconst 1000          ??_decimel_to_bcd 0027                   __pcinit 1D42  
                 __ramtop 1000                   __ptext0 102E                   __ptext1 1428  
                 __ptext2 1CAC                   __ptext3 1C84                   __ptext4 1AC4  
                 __ptext5 1A68                   __ptext6 1DD4                   __ptext7 1BFE  
                 __ptext8 1D0E                   __ptext9 19EE                   _dpowers 1001  
               _T2CONbits 000FCA                   _isdigit 1CAC          ___awmod@dividend 001F  
__size_of_I2C_Master_Init 0016                 _LCDPutCmd 1B8C                   _sprintf 1428  
               _LCDPutStr 196C       __end_of_I2C_Restart 1DD4            __pintcode_body 1866  
    end_of_initialization 1D4E             __Lmediumconst 0000                   int_func 1866  
              ?_I2C_Start 0001                ?_I2C_Write 0001                ?_ADC_start 001F  
                 postdec2 000FDD                   postinc0 000FEE                   postinc2 000FDE  
       __end_of_pwm_start 1DD8                ??_pwm_init 001F                 _PORTDbits 000F83  
      RTC_WRITE_TIME@date 002D        RTC_WRITE_TIME@hour 002B        RTC_WRITE_TIME@year 002F  
       __size_of_I2C_NACK 000A         __size_of_I2C_Read 0014         __size_of_I2C_Wait 0014  
       __size_of_I2C_Stop 0008                ?_LCDPutCmd 0001                ?_LCDPutStr 0023  
       __size_of_ADC_init 0020               _CCP1CONbits 000FBD                LCDGoto@pos 0028  
          __end_of_ISRead 0094                LCDPutStr@i 0027            __end_of___wmul 1CAC  
             _I2C_Restart 1DCC             ?_pwm_set_duty 001F       start_initialization 1D42  
          _bcd_to_decimel 1D2A          ??_LCDWriteNibble 0020         ??_I2C_Master_Init 001F  
                ??_ISRead 0001              ADC_start@ANx 0022          __CFG_OSC$INTIO67 000000  
             ??_I2C_Start 0020               ??_I2C_Write 0020               ??_ADC_start 0021  
                ??___wmul 0023        RTC_READ_TIME@month 002B   __size_of_RTC_WRITE_TIME 007A  
                ?_I2C_ACK 0001          __CFG_LPT1OSC$OFF 000000    __end_of_bcd_to_decimel 1D42  
          ??_pwm_set_duty 0021                  ?_LCDGoto 0023               __pbssCOMRAM 0040  
             ??_LCDPutCmd 0021               ??_LCDPutStr 0025                  ?_ISWrite 0001  
        RTC_READ_TIME@day 0027               sprintf@flag 003A               sprintf@prec 0039  
        ___lwdiv@dividend 001F         __CFG_CCP2MX$PORTC 000000                 __pintcode 0008  
                ?___awdiv 001F                  ?___awmod 001F                  ?___lwdiv 001F  
                ?___lwmod 0026          LCDWriteNibble@ch 0020          LCDWriteNibble@rs 001F  
       __size_of_pwm_init 001C                  _I2C_NACK 1DA8           ?_bcd_to_decimel 0001  
             __smallconst 1000                  ?_isdigit 0001                  _I2C_Read 1D6E  
                _I2C_Wait 1D82                  _I2C_Stop 1DBC                  _ADC_init 1CEE  
        ___lwdiv@quotient 0023                  ?_sprintf 002B            ___wmul@product 0023  
             _LCDGoto$116 0026          __CFG_WDTPS$32768 000000    __size_of_RTC_READ_TIME 0146  
        __size_of_I2C_ACK 000A                _ADCON0bits 000FC2                _ADCON1bits 000FC1  
       ___wmul@multiplier 001F                 _pwm_start 1DD4          __size_of_LCDGoto 0042  
        __size_of_ISWrite 1856      __end_of_pwm_set_duty 1C2C                  __Hrparam 0000  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000             I2C_Write@Data 0020  
          _RTC_WRITE_TIME 19EE   __size_of_LCD_Initialize 003A          __size_of___awdiv 0096  
        __size_of___awmod 0082          __size_of___lwdiv 005C          __size_of___lwmod 004C  
             _isdigit$784 0020                ?_pwm_start 0001              ?_I2C_Restart 0001  
              sprintf@val 003B           _I2C_Master_Init 1D58          __size_of_isdigit 0022  
         ___lwdiv@divisor 0021           ___lwdiv@counter 0025                  __ptext10 1BC6  
                __ptext11 18EA                  __ptext20 1DA8                  __ptext12 17D0  
                __ptext21 1DB2                  __ptext13 168A                  __ptext30 1CCE  
                __ptext22 1D82                  __ptext14 1D2A                  __ptext31 1CEE  
                __ptext23 1B52                  __ptext15 1D96                  __ptext24 196C  
                __ptext16 1DBC                  __ptext25 1C2C                  __ptext17 1DC4  
                __ptext26 1B10                  __ptext18 1DCC                  __ptext27 1B8C  
                __ptext19 1D6E                  __ptext28 1C58                  __ptext29 1D58  
 __size_of_decimel_to_bcd 0038             _RTC_READ_TIME 168A          __size_of_sprintf 0262  
           __size_of_main 03FA    __end_of_RTC_WRITE_TIME 1A68                  _pwm_init 1D0E  
              _LCDPutChar 1C2C         decimel_to_bcd@num 0029                  isdigit@c 0021  
          ?_RTC_READ_TIME 0021                  intlevel2 0000                 sprintf@ap 0037  
               sprintf@sp 002B          ___lwmod@dividend 0026           ?_RTC_WRITE_TIME 002A  
        ??_bcd_to_decimel 001F   __end_of_I2C_Master_Init 1D6E               ??_pwm_start 001F  
                sprintf@c 003F                  sprintf@f 002D           ___lwmod@divisor 0028  
         ___lwmod@counter 002A      RTC_WRITE_TIME@minute 002A      RTC_WRITE_TIME@second 0030  
   __size_of_pwm_set_duty 002E       RTC_WRITE_TIME@month 002E   __size_of_LCDWriteNibble 002C  
